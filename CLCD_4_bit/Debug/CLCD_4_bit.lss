
CLCD_4_bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000021d8  0000224c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001938  00000000  00000000  00002274  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b8e  00000000  00000000  00003bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000473a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000487a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000049ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006633  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000751e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000082cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000842c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000086b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008e87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ed       	ldi	r30, 0xD8	; 216
      7c:	f1 e2       	ldi	r31, 0x21	; 33
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a8 32       	cpi	r26, 0x28	; 40
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
      8a:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <main>
      8e:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__fixunssfsi>:
      96:	ef 92       	push	r14
      98:	ff 92       	push	r15
      9a:	0f 93       	push	r16
      9c:	1f 93       	push	r17
      9e:	7b 01       	movw	r14, r22
      a0:	8c 01       	movw	r16, r24
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 4b 03 	call	0x696	; 0x696 <__gesf2>
      ae:	88 23       	and	r24, r24
      b0:	8c f0       	brlt	.+34     	; 0xd4 <__fixunssfsi+0x3e>
      b2:	c8 01       	movw	r24, r16
      b4:	b7 01       	movw	r22, r14
      b6:	20 e0       	ldi	r18, 0x00	; 0
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	40 e0       	ldi	r20, 0x00	; 0
      bc:	5f e4       	ldi	r21, 0x4F	; 79
      be:	0e 94 c3 01 	call	0x386	; 0x386 <__subsf3>
      c2:	0e 94 ab 03 	call	0x756	; 0x756 <__fixsfsi>
      c6:	9b 01       	movw	r18, r22
      c8:	ac 01       	movw	r20, r24
      ca:	20 50       	subi	r18, 0x00	; 0
      cc:	30 40       	sbci	r19, 0x00	; 0
      ce:	40 40       	sbci	r20, 0x00	; 0
      d0:	50 48       	sbci	r21, 0x80	; 128
      d2:	06 c0       	rjmp	.+12     	; 0xe0 <__fixunssfsi+0x4a>
      d4:	c8 01       	movw	r24, r16
      d6:	b7 01       	movw	r22, r14
      d8:	0e 94 ab 03 	call	0x756	; 0x756 <__fixsfsi>
      dc:	9b 01       	movw	r18, r22
      de:	ac 01       	movw	r20, r24
      e0:	b9 01       	movw	r22, r18
      e2:	ca 01       	movw	r24, r20
      e4:	1f 91       	pop	r17
      e6:	0f 91       	pop	r16
      e8:	ff 90       	pop	r15
      ea:	ef 90       	pop	r14
      ec:	08 95       	ret

000000ee <_fpadd_parts>:
      ee:	a0 e0       	ldi	r26, 0x00	; 0
      f0:	b0 e0       	ldi	r27, 0x00	; 0
      f2:	ed e7       	ldi	r30, 0x7D	; 125
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <__prologue_saves__>
      fa:	dc 01       	movw	r26, r24
      fc:	2b 01       	movw	r4, r22
      fe:	fa 01       	movw	r30, r20
     100:	9c 91       	ld	r25, X
     102:	92 30       	cpi	r25, 0x02	; 2
     104:	08 f4       	brcc	.+2      	; 0x108 <_fpadd_parts+0x1a>
     106:	39 c1       	rjmp	.+626    	; 0x37a <_fpadd_parts+0x28c>
     108:	eb 01       	movw	r28, r22
     10a:	88 81       	ld	r24, Y
     10c:	82 30       	cpi	r24, 0x02	; 2
     10e:	08 f4       	brcc	.+2      	; 0x112 <_fpadd_parts+0x24>
     110:	33 c1       	rjmp	.+614    	; 0x378 <_fpadd_parts+0x28a>
     112:	94 30       	cpi	r25, 0x04	; 4
     114:	69 f4       	brne	.+26     	; 0x130 <_fpadd_parts+0x42>
     116:	84 30       	cpi	r24, 0x04	; 4
     118:	09 f0       	breq	.+2      	; 0x11c <_fpadd_parts+0x2e>
     11a:	2f c1       	rjmp	.+606    	; 0x37a <_fpadd_parts+0x28c>
     11c:	11 96       	adiw	r26, 0x01	; 1
     11e:	9c 91       	ld	r25, X
     120:	11 97       	sbiw	r26, 0x01	; 1
     122:	89 81       	ldd	r24, Y+1	; 0x01
     124:	98 17       	cp	r25, r24
     126:	09 f4       	brne	.+2      	; 0x12a <_fpadd_parts+0x3c>
     128:	28 c1       	rjmp	.+592    	; 0x37a <_fpadd_parts+0x28c>
     12a:	a0 e0       	ldi	r26, 0x00	; 0
     12c:	b1 e0       	ldi	r27, 0x01	; 1
     12e:	25 c1       	rjmp	.+586    	; 0x37a <_fpadd_parts+0x28c>
     130:	84 30       	cpi	r24, 0x04	; 4
     132:	09 f4       	brne	.+2      	; 0x136 <_fpadd_parts+0x48>
     134:	21 c1       	rjmp	.+578    	; 0x378 <_fpadd_parts+0x28a>
     136:	82 30       	cpi	r24, 0x02	; 2
     138:	a9 f4       	brne	.+42     	; 0x164 <_fpadd_parts+0x76>
     13a:	92 30       	cpi	r25, 0x02	; 2
     13c:	09 f0       	breq	.+2      	; 0x140 <_fpadd_parts+0x52>
     13e:	1d c1       	rjmp	.+570    	; 0x37a <_fpadd_parts+0x28c>
     140:	9a 01       	movw	r18, r20
     142:	ad 01       	movw	r20, r26
     144:	88 e0       	ldi	r24, 0x08	; 8
     146:	ea 01       	movw	r28, r20
     148:	09 90       	ld	r0, Y+
     14a:	ae 01       	movw	r20, r28
     14c:	e9 01       	movw	r28, r18
     14e:	09 92       	st	Y+, r0
     150:	9e 01       	movw	r18, r28
     152:	81 50       	subi	r24, 0x01	; 1
     154:	c1 f7       	brne	.-16     	; 0x146 <_fpadd_parts+0x58>
     156:	e2 01       	movw	r28, r4
     158:	89 81       	ldd	r24, Y+1	; 0x01
     15a:	11 96       	adiw	r26, 0x01	; 1
     15c:	9c 91       	ld	r25, X
     15e:	89 23       	and	r24, r25
     160:	81 83       	std	Z+1, r24	; 0x01
     162:	08 c1       	rjmp	.+528    	; 0x374 <_fpadd_parts+0x286>
     164:	92 30       	cpi	r25, 0x02	; 2
     166:	09 f4       	brne	.+2      	; 0x16a <_fpadd_parts+0x7c>
     168:	07 c1       	rjmp	.+526    	; 0x378 <_fpadd_parts+0x28a>
     16a:	12 96       	adiw	r26, 0x02	; 2
     16c:	2d 90       	ld	r2, X+
     16e:	3c 90       	ld	r3, X
     170:	13 97       	sbiw	r26, 0x03	; 3
     172:	eb 01       	movw	r28, r22
     174:	8a 81       	ldd	r24, Y+2	; 0x02
     176:	9b 81       	ldd	r25, Y+3	; 0x03
     178:	14 96       	adiw	r26, 0x04	; 4
     17a:	ad 90       	ld	r10, X+
     17c:	bd 90       	ld	r11, X+
     17e:	cd 90       	ld	r12, X+
     180:	dc 90       	ld	r13, X
     182:	17 97       	sbiw	r26, 0x07	; 7
     184:	ec 80       	ldd	r14, Y+4	; 0x04
     186:	fd 80       	ldd	r15, Y+5	; 0x05
     188:	0e 81       	ldd	r16, Y+6	; 0x06
     18a:	1f 81       	ldd	r17, Y+7	; 0x07
     18c:	91 01       	movw	r18, r2
     18e:	28 1b       	sub	r18, r24
     190:	39 0b       	sbc	r19, r25
     192:	b9 01       	movw	r22, r18
     194:	37 ff       	sbrs	r19, 7
     196:	04 c0       	rjmp	.+8      	; 0x1a0 <_fpadd_parts+0xb2>
     198:	66 27       	eor	r22, r22
     19a:	77 27       	eor	r23, r23
     19c:	62 1b       	sub	r22, r18
     19e:	73 0b       	sbc	r23, r19
     1a0:	60 32       	cpi	r22, 0x20	; 32
     1a2:	71 05       	cpc	r23, r1
     1a4:	0c f0       	brlt	.+2      	; 0x1a8 <_fpadd_parts+0xba>
     1a6:	61 c0       	rjmp	.+194    	; 0x26a <_fpadd_parts+0x17c>
     1a8:	12 16       	cp	r1, r18
     1aa:	13 06       	cpc	r1, r19
     1ac:	6c f5       	brge	.+90     	; 0x208 <_fpadd_parts+0x11a>
     1ae:	37 01       	movw	r6, r14
     1b0:	48 01       	movw	r8, r16
     1b2:	06 2e       	mov	r0, r22
     1b4:	04 c0       	rjmp	.+8      	; 0x1be <_fpadd_parts+0xd0>
     1b6:	96 94       	lsr	r9
     1b8:	87 94       	ror	r8
     1ba:	77 94       	ror	r7
     1bc:	67 94       	ror	r6
     1be:	0a 94       	dec	r0
     1c0:	d2 f7       	brpl	.-12     	; 0x1b6 <_fpadd_parts+0xc8>
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <_fpadd_parts+0xe6>
     1cc:	22 0f       	add	r18, r18
     1ce:	33 1f       	adc	r19, r19
     1d0:	44 1f       	adc	r20, r20
     1d2:	55 1f       	adc	r21, r21
     1d4:	6a 95       	dec	r22
     1d6:	d2 f7       	brpl	.-12     	; 0x1cc <_fpadd_parts+0xde>
     1d8:	21 50       	subi	r18, 0x01	; 1
     1da:	30 40       	sbci	r19, 0x00	; 0
     1dc:	40 40       	sbci	r20, 0x00	; 0
     1de:	50 40       	sbci	r21, 0x00	; 0
     1e0:	2e 21       	and	r18, r14
     1e2:	3f 21       	and	r19, r15
     1e4:	40 23       	and	r20, r16
     1e6:	51 23       	and	r21, r17
     1e8:	21 15       	cp	r18, r1
     1ea:	31 05       	cpc	r19, r1
     1ec:	41 05       	cpc	r20, r1
     1ee:	51 05       	cpc	r21, r1
     1f0:	21 f0       	breq	.+8      	; 0x1fa <_fpadd_parts+0x10c>
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	40 e0       	ldi	r20, 0x00	; 0
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	79 01       	movw	r14, r18
     1fc:	8a 01       	movw	r16, r20
     1fe:	e6 28       	or	r14, r6
     200:	f7 28       	or	r15, r7
     202:	08 29       	or	r16, r8
     204:	19 29       	or	r17, r9
     206:	3c c0       	rjmp	.+120    	; 0x280 <_fpadd_parts+0x192>
     208:	23 2b       	or	r18, r19
     20a:	d1 f1       	breq	.+116    	; 0x280 <_fpadd_parts+0x192>
     20c:	26 0e       	add	r2, r22
     20e:	37 1e       	adc	r3, r23
     210:	35 01       	movw	r6, r10
     212:	46 01       	movw	r8, r12
     214:	06 2e       	mov	r0, r22
     216:	04 c0       	rjmp	.+8      	; 0x220 <_fpadd_parts+0x132>
     218:	96 94       	lsr	r9
     21a:	87 94       	ror	r8
     21c:	77 94       	ror	r7
     21e:	67 94       	ror	r6
     220:	0a 94       	dec	r0
     222:	d2 f7       	brpl	.-12     	; 0x218 <_fpadd_parts+0x12a>
     224:	21 e0       	ldi	r18, 0x01	; 1
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	04 c0       	rjmp	.+8      	; 0x236 <_fpadd_parts+0x148>
     22e:	22 0f       	add	r18, r18
     230:	33 1f       	adc	r19, r19
     232:	44 1f       	adc	r20, r20
     234:	55 1f       	adc	r21, r21
     236:	6a 95       	dec	r22
     238:	d2 f7       	brpl	.-12     	; 0x22e <_fpadd_parts+0x140>
     23a:	21 50       	subi	r18, 0x01	; 1
     23c:	30 40       	sbci	r19, 0x00	; 0
     23e:	40 40       	sbci	r20, 0x00	; 0
     240:	50 40       	sbci	r21, 0x00	; 0
     242:	2a 21       	and	r18, r10
     244:	3b 21       	and	r19, r11
     246:	4c 21       	and	r20, r12
     248:	5d 21       	and	r21, r13
     24a:	21 15       	cp	r18, r1
     24c:	31 05       	cpc	r19, r1
     24e:	41 05       	cpc	r20, r1
     250:	51 05       	cpc	r21, r1
     252:	21 f0       	breq	.+8      	; 0x25c <_fpadd_parts+0x16e>
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	59 01       	movw	r10, r18
     25e:	6a 01       	movw	r12, r20
     260:	a6 28       	or	r10, r6
     262:	b7 28       	or	r11, r7
     264:	c8 28       	or	r12, r8
     266:	d9 28       	or	r13, r9
     268:	0b c0       	rjmp	.+22     	; 0x280 <_fpadd_parts+0x192>
     26a:	82 15       	cp	r24, r2
     26c:	93 05       	cpc	r25, r3
     26e:	2c f0       	brlt	.+10     	; 0x27a <_fpadd_parts+0x18c>
     270:	1c 01       	movw	r2, r24
     272:	aa 24       	eor	r10, r10
     274:	bb 24       	eor	r11, r11
     276:	65 01       	movw	r12, r10
     278:	03 c0       	rjmp	.+6      	; 0x280 <_fpadd_parts+0x192>
     27a:	ee 24       	eor	r14, r14
     27c:	ff 24       	eor	r15, r15
     27e:	87 01       	movw	r16, r14
     280:	11 96       	adiw	r26, 0x01	; 1
     282:	9c 91       	ld	r25, X
     284:	d2 01       	movw	r26, r4
     286:	11 96       	adiw	r26, 0x01	; 1
     288:	8c 91       	ld	r24, X
     28a:	98 17       	cp	r25, r24
     28c:	09 f4       	brne	.+2      	; 0x290 <_fpadd_parts+0x1a2>
     28e:	45 c0       	rjmp	.+138    	; 0x31a <_fpadd_parts+0x22c>
     290:	99 23       	and	r25, r25
     292:	39 f0       	breq	.+14     	; 0x2a2 <_fpadd_parts+0x1b4>
     294:	a8 01       	movw	r20, r16
     296:	97 01       	movw	r18, r14
     298:	2a 19       	sub	r18, r10
     29a:	3b 09       	sbc	r19, r11
     29c:	4c 09       	sbc	r20, r12
     29e:	5d 09       	sbc	r21, r13
     2a0:	06 c0       	rjmp	.+12     	; 0x2ae <_fpadd_parts+0x1c0>
     2a2:	a6 01       	movw	r20, r12
     2a4:	95 01       	movw	r18, r10
     2a6:	2e 19       	sub	r18, r14
     2a8:	3f 09       	sbc	r19, r15
     2aa:	40 0b       	sbc	r20, r16
     2ac:	51 0b       	sbc	r21, r17
     2ae:	57 fd       	sbrc	r21, 7
     2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <_fpadd_parts+0x1d4>
     2b2:	11 82       	std	Z+1, r1	; 0x01
     2b4:	33 82       	std	Z+3, r3	; 0x03
     2b6:	22 82       	std	Z+2, r2	; 0x02
     2b8:	24 83       	std	Z+4, r18	; 0x04
     2ba:	35 83       	std	Z+5, r19	; 0x05
     2bc:	46 83       	std	Z+6, r20	; 0x06
     2be:	57 83       	std	Z+7, r21	; 0x07
     2c0:	1d c0       	rjmp	.+58     	; 0x2fc <_fpadd_parts+0x20e>
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	81 83       	std	Z+1, r24	; 0x01
     2c6:	33 82       	std	Z+3, r3	; 0x03
     2c8:	22 82       	std	Z+2, r2	; 0x02
     2ca:	88 27       	eor	r24, r24
     2cc:	99 27       	eor	r25, r25
     2ce:	dc 01       	movw	r26, r24
     2d0:	82 1b       	sub	r24, r18
     2d2:	93 0b       	sbc	r25, r19
     2d4:	a4 0b       	sbc	r26, r20
     2d6:	b5 0b       	sbc	r27, r21
     2d8:	84 83       	std	Z+4, r24	; 0x04
     2da:	95 83       	std	Z+5, r25	; 0x05
     2dc:	a6 83       	std	Z+6, r26	; 0x06
     2de:	b7 83       	std	Z+7, r27	; 0x07
     2e0:	0d c0       	rjmp	.+26     	; 0x2fc <_fpadd_parts+0x20e>
     2e2:	22 0f       	add	r18, r18
     2e4:	33 1f       	adc	r19, r19
     2e6:	44 1f       	adc	r20, r20
     2e8:	55 1f       	adc	r21, r21
     2ea:	24 83       	std	Z+4, r18	; 0x04
     2ec:	35 83       	std	Z+5, r19	; 0x05
     2ee:	46 83       	std	Z+6, r20	; 0x06
     2f0:	57 83       	std	Z+7, r21	; 0x07
     2f2:	82 81       	ldd	r24, Z+2	; 0x02
     2f4:	93 81       	ldd	r25, Z+3	; 0x03
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	93 83       	std	Z+3, r25	; 0x03
     2fa:	82 83       	std	Z+2, r24	; 0x02
     2fc:	24 81       	ldd	r18, Z+4	; 0x04
     2fe:	35 81       	ldd	r19, Z+5	; 0x05
     300:	46 81       	ldd	r20, Z+6	; 0x06
     302:	57 81       	ldd	r21, Z+7	; 0x07
     304:	da 01       	movw	r26, r20
     306:	c9 01       	movw	r24, r18
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	a1 09       	sbc	r26, r1
     30c:	b1 09       	sbc	r27, r1
     30e:	8f 5f       	subi	r24, 0xFF	; 255
     310:	9f 4f       	sbci	r25, 0xFF	; 255
     312:	af 4f       	sbci	r26, 0xFF	; 255
     314:	bf 43       	sbci	r27, 0x3F	; 63
     316:	28 f3       	brcs	.-54     	; 0x2e2 <_fpadd_parts+0x1f4>
     318:	0b c0       	rjmp	.+22     	; 0x330 <_fpadd_parts+0x242>
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	33 82       	std	Z+3, r3	; 0x03
     31e:	22 82       	std	Z+2, r2	; 0x02
     320:	ea 0c       	add	r14, r10
     322:	fb 1c       	adc	r15, r11
     324:	0c 1d       	adc	r16, r12
     326:	1d 1d       	adc	r17, r13
     328:	e4 82       	std	Z+4, r14	; 0x04
     32a:	f5 82       	std	Z+5, r15	; 0x05
     32c:	06 83       	std	Z+6, r16	; 0x06
     32e:	17 83       	std	Z+7, r17	; 0x07
     330:	83 e0       	ldi	r24, 0x03	; 3
     332:	80 83       	st	Z, r24
     334:	24 81       	ldd	r18, Z+4	; 0x04
     336:	35 81       	ldd	r19, Z+5	; 0x05
     338:	46 81       	ldd	r20, Z+6	; 0x06
     33a:	57 81       	ldd	r21, Z+7	; 0x07
     33c:	57 ff       	sbrs	r21, 7
     33e:	1a c0       	rjmp	.+52     	; 0x374 <_fpadd_parts+0x286>
     340:	c9 01       	movw	r24, r18
     342:	aa 27       	eor	r26, r26
     344:	97 fd       	sbrc	r25, 7
     346:	a0 95       	com	r26
     348:	ba 2f       	mov	r27, r26
     34a:	81 70       	andi	r24, 0x01	; 1
     34c:	90 70       	andi	r25, 0x00	; 0
     34e:	a0 70       	andi	r26, 0x00	; 0
     350:	b0 70       	andi	r27, 0x00	; 0
     352:	56 95       	lsr	r21
     354:	47 95       	ror	r20
     356:	37 95       	ror	r19
     358:	27 95       	ror	r18
     35a:	82 2b       	or	r24, r18
     35c:	93 2b       	or	r25, r19
     35e:	a4 2b       	or	r26, r20
     360:	b5 2b       	or	r27, r21
     362:	84 83       	std	Z+4, r24	; 0x04
     364:	95 83       	std	Z+5, r25	; 0x05
     366:	a6 83       	std	Z+6, r26	; 0x06
     368:	b7 83       	std	Z+7, r27	; 0x07
     36a:	82 81       	ldd	r24, Z+2	; 0x02
     36c:	93 81       	ldd	r25, Z+3	; 0x03
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	93 83       	std	Z+3, r25	; 0x03
     372:	82 83       	std	Z+2, r24	; 0x02
     374:	df 01       	movw	r26, r30
     376:	01 c0       	rjmp	.+2      	; 0x37a <_fpadd_parts+0x28c>
     378:	d2 01       	movw	r26, r4
     37a:	cd 01       	movw	r24, r26
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	e2 e1       	ldi	r30, 0x12	; 18
     382:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__epilogue_restores__>

00000386 <__subsf3>:
     386:	a0 e2       	ldi	r26, 0x20	; 32
     388:	b0 e0       	ldi	r27, 0x00	; 0
     38a:	e9 ec       	ldi	r30, 0xC9	; 201
     38c:	f1 e0       	ldi	r31, 0x01	; 1
     38e:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__prologue_saves__+0x18>
     392:	69 83       	std	Y+1, r22	; 0x01
     394:	7a 83       	std	Y+2, r23	; 0x02
     396:	8b 83       	std	Y+3, r24	; 0x03
     398:	9c 83       	std	Y+4, r25	; 0x04
     39a:	2d 83       	std	Y+5, r18	; 0x05
     39c:	3e 83       	std	Y+6, r19	; 0x06
     39e:	4f 83       	std	Y+7, r20	; 0x07
     3a0:	58 87       	std	Y+8, r21	; 0x08
     3a2:	e9 e0       	ldi	r30, 0x09	; 9
     3a4:	ee 2e       	mov	r14, r30
     3a6:	f1 2c       	mov	r15, r1
     3a8:	ec 0e       	add	r14, r28
     3aa:	fd 1e       	adc	r15, r29
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	b7 01       	movw	r22, r14
     3b2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     3b6:	8e 01       	movw	r16, r28
     3b8:	0f 5e       	subi	r16, 0xEF	; 239
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	ce 01       	movw	r24, r28
     3be:	05 96       	adiw	r24, 0x05	; 5
     3c0:	b8 01       	movw	r22, r16
     3c2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     3c6:	8a 89       	ldd	r24, Y+18	; 0x12
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	89 27       	eor	r24, r25
     3cc:	8a 8b       	std	Y+18, r24	; 0x12
     3ce:	c7 01       	movw	r24, r14
     3d0:	b8 01       	movw	r22, r16
     3d2:	ae 01       	movw	r20, r28
     3d4:	47 5e       	subi	r20, 0xE7	; 231
     3d6:	5f 4f       	sbci	r21, 0xFF	; 255
     3d8:	0e 94 77 00 	call	0xee	; 0xee <_fpadd_parts>
     3dc:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__pack_f>
     3e0:	a0 96       	adiw	r28, 0x20	; 32
     3e2:	e6 e0       	ldi	r30, 0x06	; 6
     3e4:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__epilogue_restores__+0x18>

000003e8 <__addsf3>:
     3e8:	a0 e2       	ldi	r26, 0x20	; 32
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	ea ef       	ldi	r30, 0xFA	; 250
     3ee:	f1 e0       	ldi	r31, 0x01	; 1
     3f0:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__prologue_saves__+0x18>
     3f4:	69 83       	std	Y+1, r22	; 0x01
     3f6:	7a 83       	std	Y+2, r23	; 0x02
     3f8:	8b 83       	std	Y+3, r24	; 0x03
     3fa:	9c 83       	std	Y+4, r25	; 0x04
     3fc:	2d 83       	std	Y+5, r18	; 0x05
     3fe:	3e 83       	std	Y+6, r19	; 0x06
     400:	4f 83       	std	Y+7, r20	; 0x07
     402:	58 87       	std	Y+8, r21	; 0x08
     404:	f9 e0       	ldi	r31, 0x09	; 9
     406:	ef 2e       	mov	r14, r31
     408:	f1 2c       	mov	r15, r1
     40a:	ec 0e       	add	r14, r28
     40c:	fd 1e       	adc	r15, r29
     40e:	ce 01       	movw	r24, r28
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	b7 01       	movw	r22, r14
     414:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     418:	8e 01       	movw	r16, r28
     41a:	0f 5e       	subi	r16, 0xEF	; 239
     41c:	1f 4f       	sbci	r17, 0xFF	; 255
     41e:	ce 01       	movw	r24, r28
     420:	05 96       	adiw	r24, 0x05	; 5
     422:	b8 01       	movw	r22, r16
     424:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     428:	c7 01       	movw	r24, r14
     42a:	b8 01       	movw	r22, r16
     42c:	ae 01       	movw	r20, r28
     42e:	47 5e       	subi	r20, 0xE7	; 231
     430:	5f 4f       	sbci	r21, 0xFF	; 255
     432:	0e 94 77 00 	call	0xee	; 0xee <_fpadd_parts>
     436:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__pack_f>
     43a:	a0 96       	adiw	r28, 0x20	; 32
     43c:	e6 e0       	ldi	r30, 0x06	; 6
     43e:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__epilogue_restores__+0x18>

00000442 <__mulsf3>:
     442:	a0 e2       	ldi	r26, 0x20	; 32
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e7 e2       	ldi	r30, 0x27	; 39
     448:	f2 e0       	ldi	r31, 0x02	; 2
     44a:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <__prologue_saves__>
     44e:	69 83       	std	Y+1, r22	; 0x01
     450:	7a 83       	std	Y+2, r23	; 0x02
     452:	8b 83       	std	Y+3, r24	; 0x03
     454:	9c 83       	std	Y+4, r25	; 0x04
     456:	2d 83       	std	Y+5, r18	; 0x05
     458:	3e 83       	std	Y+6, r19	; 0x06
     45a:	4f 83       	std	Y+7, r20	; 0x07
     45c:	58 87       	std	Y+8, r21	; 0x08
     45e:	ce 01       	movw	r24, r28
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	be 01       	movw	r22, r28
     464:	67 5f       	subi	r22, 0xF7	; 247
     466:	7f 4f       	sbci	r23, 0xFF	; 255
     468:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     46c:	ce 01       	movw	r24, r28
     46e:	05 96       	adiw	r24, 0x05	; 5
     470:	be 01       	movw	r22, r28
     472:	6f 5e       	subi	r22, 0xEF	; 239
     474:	7f 4f       	sbci	r23, 0xFF	; 255
     476:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     47a:	99 85       	ldd	r25, Y+9	; 0x09
     47c:	92 30       	cpi	r25, 0x02	; 2
     47e:	88 f0       	brcs	.+34     	; 0x4a2 <__mulsf3+0x60>
     480:	89 89       	ldd	r24, Y+17	; 0x11
     482:	82 30       	cpi	r24, 0x02	; 2
     484:	c8 f0       	brcs	.+50     	; 0x4b8 <__mulsf3+0x76>
     486:	94 30       	cpi	r25, 0x04	; 4
     488:	19 f4       	brne	.+6      	; 0x490 <__mulsf3+0x4e>
     48a:	82 30       	cpi	r24, 0x02	; 2
     48c:	51 f4       	brne	.+20     	; 0x4a2 <__mulsf3+0x60>
     48e:	04 c0       	rjmp	.+8      	; 0x498 <__mulsf3+0x56>
     490:	84 30       	cpi	r24, 0x04	; 4
     492:	29 f4       	brne	.+10     	; 0x49e <__mulsf3+0x5c>
     494:	92 30       	cpi	r25, 0x02	; 2
     496:	81 f4       	brne	.+32     	; 0x4b8 <__mulsf3+0x76>
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	c6 c0       	rjmp	.+396    	; 0x62a <__mulsf3+0x1e8>
     49e:	92 30       	cpi	r25, 0x02	; 2
     4a0:	49 f4       	brne	.+18     	; 0x4b4 <__mulsf3+0x72>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a6:	8a 89       	ldd	r24, Y+18	; 0x12
     4a8:	98 13       	cpse	r25, r24
     4aa:	21 e0       	ldi	r18, 0x01	; 1
     4ac:	2a 87       	std	Y+10, r18	; 0x0a
     4ae:	ce 01       	movw	r24, r28
     4b0:	09 96       	adiw	r24, 0x09	; 9
     4b2:	bb c0       	rjmp	.+374    	; 0x62a <__mulsf3+0x1e8>
     4b4:	82 30       	cpi	r24, 0x02	; 2
     4b6:	49 f4       	brne	.+18     	; 0x4ca <__mulsf3+0x88>
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	98 13       	cpse	r25, r24
     4c0:	21 e0       	ldi	r18, 0x01	; 1
     4c2:	2a 8b       	std	Y+18, r18	; 0x12
     4c4:	ce 01       	movw	r24, r28
     4c6:	41 96       	adiw	r24, 0x11	; 17
     4c8:	b0 c0       	rjmp	.+352    	; 0x62a <__mulsf3+0x1e8>
     4ca:	2d 84       	ldd	r2, Y+13	; 0x0d
     4cc:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ce:	4f 84       	ldd	r4, Y+15	; 0x0f
     4d0:	58 88       	ldd	r5, Y+16	; 0x10
     4d2:	6d 88       	ldd	r6, Y+21	; 0x15
     4d4:	7e 88       	ldd	r7, Y+22	; 0x16
     4d6:	8f 88       	ldd	r8, Y+23	; 0x17
     4d8:	98 8c       	ldd	r9, Y+24	; 0x18
     4da:	ee 24       	eor	r14, r14
     4dc:	ff 24       	eor	r15, r15
     4de:	87 01       	movw	r16, r14
     4e0:	aa 24       	eor	r10, r10
     4e2:	bb 24       	eor	r11, r11
     4e4:	65 01       	movw	r12, r10
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	e0 e0       	ldi	r30, 0x00	; 0
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	c1 01       	movw	r24, r2
     4f4:	81 70       	andi	r24, 0x01	; 1
     4f6:	90 70       	andi	r25, 0x00	; 0
     4f8:	89 2b       	or	r24, r25
     4fa:	e9 f0       	breq	.+58     	; 0x536 <__mulsf3+0xf4>
     4fc:	e6 0c       	add	r14, r6
     4fe:	f7 1c       	adc	r15, r7
     500:	08 1d       	adc	r16, r8
     502:	19 1d       	adc	r17, r9
     504:	9a 01       	movw	r18, r20
     506:	ab 01       	movw	r20, r22
     508:	2a 0d       	add	r18, r10
     50a:	3b 1d       	adc	r19, r11
     50c:	4c 1d       	adc	r20, r12
     50e:	5d 1d       	adc	r21, r13
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	a0 e0       	ldi	r26, 0x00	; 0
     516:	b0 e0       	ldi	r27, 0x00	; 0
     518:	e6 14       	cp	r14, r6
     51a:	f7 04       	cpc	r15, r7
     51c:	08 05       	cpc	r16, r8
     51e:	19 05       	cpc	r17, r9
     520:	20 f4       	brcc	.+8      	; 0x52a <__mulsf3+0xe8>
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	a0 e0       	ldi	r26, 0x00	; 0
     528:	b0 e0       	ldi	r27, 0x00	; 0
     52a:	ba 01       	movw	r22, r20
     52c:	a9 01       	movw	r20, r18
     52e:	48 0f       	add	r20, r24
     530:	59 1f       	adc	r21, r25
     532:	6a 1f       	adc	r22, r26
     534:	7b 1f       	adc	r23, r27
     536:	aa 0c       	add	r10, r10
     538:	bb 1c       	adc	r11, r11
     53a:	cc 1c       	adc	r12, r12
     53c:	dd 1c       	adc	r13, r13
     53e:	97 fe       	sbrs	r9, 7
     540:	08 c0       	rjmp	.+16     	; 0x552 <__mulsf3+0x110>
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	a0 e0       	ldi	r26, 0x00	; 0
     548:	b0 e0       	ldi	r27, 0x00	; 0
     54a:	a8 2a       	or	r10, r24
     54c:	b9 2a       	or	r11, r25
     54e:	ca 2a       	or	r12, r26
     550:	db 2a       	or	r13, r27
     552:	31 96       	adiw	r30, 0x01	; 1
     554:	e0 32       	cpi	r30, 0x20	; 32
     556:	f1 05       	cpc	r31, r1
     558:	49 f0       	breq	.+18     	; 0x56c <__mulsf3+0x12a>
     55a:	66 0c       	add	r6, r6
     55c:	77 1c       	adc	r7, r7
     55e:	88 1c       	adc	r8, r8
     560:	99 1c       	adc	r9, r9
     562:	56 94       	lsr	r5
     564:	47 94       	ror	r4
     566:	37 94       	ror	r3
     568:	27 94       	ror	r2
     56a:	c3 cf       	rjmp	.-122    	; 0x4f2 <__mulsf3+0xb0>
     56c:	fa 85       	ldd	r31, Y+10	; 0x0a
     56e:	ea 89       	ldd	r30, Y+18	; 0x12
     570:	2b 89       	ldd	r18, Y+19	; 0x13
     572:	3c 89       	ldd	r19, Y+20	; 0x14
     574:	8b 85       	ldd	r24, Y+11	; 0x0b
     576:	9c 85       	ldd	r25, Y+12	; 0x0c
     578:	28 0f       	add	r18, r24
     57a:	39 1f       	adc	r19, r25
     57c:	2e 5f       	subi	r18, 0xFE	; 254
     57e:	3f 4f       	sbci	r19, 0xFF	; 255
     580:	17 c0       	rjmp	.+46     	; 0x5b0 <__mulsf3+0x16e>
     582:	ca 01       	movw	r24, r20
     584:	81 70       	andi	r24, 0x01	; 1
     586:	90 70       	andi	r25, 0x00	; 0
     588:	89 2b       	or	r24, r25
     58a:	61 f0       	breq	.+24     	; 0x5a4 <__mulsf3+0x162>
     58c:	16 95       	lsr	r17
     58e:	07 95       	ror	r16
     590:	f7 94       	ror	r15
     592:	e7 94       	ror	r14
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	a0 e0       	ldi	r26, 0x00	; 0
     59a:	b0 e8       	ldi	r27, 0x80	; 128
     59c:	e8 2a       	or	r14, r24
     59e:	f9 2a       	or	r15, r25
     5a0:	0a 2b       	or	r16, r26
     5a2:	1b 2b       	or	r17, r27
     5a4:	76 95       	lsr	r23
     5a6:	67 95       	ror	r22
     5a8:	57 95       	ror	r21
     5aa:	47 95       	ror	r20
     5ac:	2f 5f       	subi	r18, 0xFF	; 255
     5ae:	3f 4f       	sbci	r19, 0xFF	; 255
     5b0:	77 fd       	sbrc	r23, 7
     5b2:	e7 cf       	rjmp	.-50     	; 0x582 <__mulsf3+0x140>
     5b4:	0c c0       	rjmp	.+24     	; 0x5ce <__mulsf3+0x18c>
     5b6:	44 0f       	add	r20, r20
     5b8:	55 1f       	adc	r21, r21
     5ba:	66 1f       	adc	r22, r22
     5bc:	77 1f       	adc	r23, r23
     5be:	17 fd       	sbrc	r17, 7
     5c0:	41 60       	ori	r20, 0x01	; 1
     5c2:	ee 0c       	add	r14, r14
     5c4:	ff 1c       	adc	r15, r15
     5c6:	00 1f       	adc	r16, r16
     5c8:	11 1f       	adc	r17, r17
     5ca:	21 50       	subi	r18, 0x01	; 1
     5cc:	30 40       	sbci	r19, 0x00	; 0
     5ce:	40 30       	cpi	r20, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	59 07       	cpc	r21, r25
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	69 07       	cpc	r22, r25
     5d8:	90 e4       	ldi	r25, 0x40	; 64
     5da:	79 07       	cpc	r23, r25
     5dc:	60 f3       	brcs	.-40     	; 0x5b6 <__mulsf3+0x174>
     5de:	2b 8f       	std	Y+27, r18	; 0x1b
     5e0:	3c 8f       	std	Y+28, r19	; 0x1c
     5e2:	db 01       	movw	r26, r22
     5e4:	ca 01       	movw	r24, r20
     5e6:	8f 77       	andi	r24, 0x7F	; 127
     5e8:	90 70       	andi	r25, 0x00	; 0
     5ea:	a0 70       	andi	r26, 0x00	; 0
     5ec:	b0 70       	andi	r27, 0x00	; 0
     5ee:	80 34       	cpi	r24, 0x40	; 64
     5f0:	91 05       	cpc	r25, r1
     5f2:	a1 05       	cpc	r26, r1
     5f4:	b1 05       	cpc	r27, r1
     5f6:	61 f4       	brne	.+24     	; 0x610 <__mulsf3+0x1ce>
     5f8:	47 fd       	sbrc	r20, 7
     5fa:	0a c0       	rjmp	.+20     	; 0x610 <__mulsf3+0x1ce>
     5fc:	e1 14       	cp	r14, r1
     5fe:	f1 04       	cpc	r15, r1
     600:	01 05       	cpc	r16, r1
     602:	11 05       	cpc	r17, r1
     604:	29 f0       	breq	.+10     	; 0x610 <__mulsf3+0x1ce>
     606:	40 5c       	subi	r20, 0xC0	; 192
     608:	5f 4f       	sbci	r21, 0xFF	; 255
     60a:	6f 4f       	sbci	r22, 0xFF	; 255
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	40 78       	andi	r20, 0x80	; 128
     610:	1a 8e       	std	Y+26, r1	; 0x1a
     612:	fe 17       	cp	r31, r30
     614:	11 f0       	breq	.+4      	; 0x61a <__mulsf3+0x1d8>
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	8a 8f       	std	Y+26, r24	; 0x1a
     61a:	4d 8f       	std	Y+29, r20	; 0x1d
     61c:	5e 8f       	std	Y+30, r21	; 0x1e
     61e:	6f 8f       	std	Y+31, r22	; 0x1f
     620:	78 a3       	std	Y+32, r23	; 0x20
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	89 8f       	std	Y+25, r24	; 0x19
     626:	ce 01       	movw	r24, r28
     628:	49 96       	adiw	r24, 0x19	; 25
     62a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__pack_f>
     62e:	a0 96       	adiw	r28, 0x20	; 32
     630:	e2 e1       	ldi	r30, 0x12	; 18
     632:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__epilogue_restores__>

00000636 <__gtsf2>:
     636:	a8 e1       	ldi	r26, 0x18	; 24
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	e1 e2       	ldi	r30, 0x21	; 33
     63c:	f3 e0       	ldi	r31, 0x03	; 3
     63e:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__prologue_saves__+0x18>
     642:	69 83       	std	Y+1, r22	; 0x01
     644:	7a 83       	std	Y+2, r23	; 0x02
     646:	8b 83       	std	Y+3, r24	; 0x03
     648:	9c 83       	std	Y+4, r25	; 0x04
     64a:	2d 83       	std	Y+5, r18	; 0x05
     64c:	3e 83       	std	Y+6, r19	; 0x06
     64e:	4f 83       	std	Y+7, r20	; 0x07
     650:	58 87       	std	Y+8, r21	; 0x08
     652:	89 e0       	ldi	r24, 0x09	; 9
     654:	e8 2e       	mov	r14, r24
     656:	f1 2c       	mov	r15, r1
     658:	ec 0e       	add	r14, r28
     65a:	fd 1e       	adc	r15, r29
     65c:	ce 01       	movw	r24, r28
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	b7 01       	movw	r22, r14
     662:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     666:	8e 01       	movw	r16, r28
     668:	0f 5e       	subi	r16, 0xEF	; 239
     66a:	1f 4f       	sbci	r17, 0xFF	; 255
     66c:	ce 01       	movw	r24, r28
     66e:	05 96       	adiw	r24, 0x05	; 5
     670:	b8 01       	movw	r22, r16
     672:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     676:	89 85       	ldd	r24, Y+9	; 0x09
     678:	82 30       	cpi	r24, 0x02	; 2
     67a:	40 f0       	brcs	.+16     	; 0x68c <__gtsf2+0x56>
     67c:	89 89       	ldd	r24, Y+17	; 0x11
     67e:	82 30       	cpi	r24, 0x02	; 2
     680:	28 f0       	brcs	.+10     	; 0x68c <__gtsf2+0x56>
     682:	c7 01       	movw	r24, r14
     684:	b8 01       	movw	r22, r16
     686:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fpcmp_parts_f>
     68a:	01 c0       	rjmp	.+2      	; 0x68e <__gtsf2+0x58>
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	68 96       	adiw	r28, 0x18	; 24
     690:	e6 e0       	ldi	r30, 0x06	; 6
     692:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__epilogue_restores__+0x18>

00000696 <__gesf2>:
     696:	a8 e1       	ldi	r26, 0x18	; 24
     698:	b0 e0       	ldi	r27, 0x00	; 0
     69a:	e1 e5       	ldi	r30, 0x51	; 81
     69c:	f3 e0       	ldi	r31, 0x03	; 3
     69e:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__prologue_saves__+0x18>
     6a2:	69 83       	std	Y+1, r22	; 0x01
     6a4:	7a 83       	std	Y+2, r23	; 0x02
     6a6:	8b 83       	std	Y+3, r24	; 0x03
     6a8:	9c 83       	std	Y+4, r25	; 0x04
     6aa:	2d 83       	std	Y+5, r18	; 0x05
     6ac:	3e 83       	std	Y+6, r19	; 0x06
     6ae:	4f 83       	std	Y+7, r20	; 0x07
     6b0:	58 87       	std	Y+8, r21	; 0x08
     6b2:	89 e0       	ldi	r24, 0x09	; 9
     6b4:	e8 2e       	mov	r14, r24
     6b6:	f1 2c       	mov	r15, r1
     6b8:	ec 0e       	add	r14, r28
     6ba:	fd 1e       	adc	r15, r29
     6bc:	ce 01       	movw	r24, r28
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	b7 01       	movw	r22, r14
     6c2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     6c6:	8e 01       	movw	r16, r28
     6c8:	0f 5e       	subi	r16, 0xEF	; 239
     6ca:	1f 4f       	sbci	r17, 0xFF	; 255
     6cc:	ce 01       	movw	r24, r28
     6ce:	05 96       	adiw	r24, 0x05	; 5
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     6d6:	89 85       	ldd	r24, Y+9	; 0x09
     6d8:	82 30       	cpi	r24, 0x02	; 2
     6da:	40 f0       	brcs	.+16     	; 0x6ec <__gesf2+0x56>
     6dc:	89 89       	ldd	r24, Y+17	; 0x11
     6de:	82 30       	cpi	r24, 0x02	; 2
     6e0:	28 f0       	brcs	.+10     	; 0x6ec <__gesf2+0x56>
     6e2:	c7 01       	movw	r24, r14
     6e4:	b8 01       	movw	r22, r16
     6e6:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fpcmp_parts_f>
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <__gesf2+0x58>
     6ec:	8f ef       	ldi	r24, 0xFF	; 255
     6ee:	68 96       	adiw	r28, 0x18	; 24
     6f0:	e6 e0       	ldi	r30, 0x06	; 6
     6f2:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__epilogue_restores__+0x18>

000006f6 <__ltsf2>:
     6f6:	a8 e1       	ldi	r26, 0x18	; 24
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	e1 e8       	ldi	r30, 0x81	; 129
     6fc:	f3 e0       	ldi	r31, 0x03	; 3
     6fe:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__prologue_saves__+0x18>
     702:	69 83       	std	Y+1, r22	; 0x01
     704:	7a 83       	std	Y+2, r23	; 0x02
     706:	8b 83       	std	Y+3, r24	; 0x03
     708:	9c 83       	std	Y+4, r25	; 0x04
     70a:	2d 83       	std	Y+5, r18	; 0x05
     70c:	3e 83       	std	Y+6, r19	; 0x06
     70e:	4f 83       	std	Y+7, r20	; 0x07
     710:	58 87       	std	Y+8, r21	; 0x08
     712:	89 e0       	ldi	r24, 0x09	; 9
     714:	e8 2e       	mov	r14, r24
     716:	f1 2c       	mov	r15, r1
     718:	ec 0e       	add	r14, r28
     71a:	fd 1e       	adc	r15, r29
     71c:	ce 01       	movw	r24, r28
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	b7 01       	movw	r22, r14
     722:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     726:	8e 01       	movw	r16, r28
     728:	0f 5e       	subi	r16, 0xEF	; 239
     72a:	1f 4f       	sbci	r17, 0xFF	; 255
     72c:	ce 01       	movw	r24, r28
     72e:	05 96       	adiw	r24, 0x05	; 5
     730:	b8 01       	movw	r22, r16
     732:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     736:	89 85       	ldd	r24, Y+9	; 0x09
     738:	82 30       	cpi	r24, 0x02	; 2
     73a:	40 f0       	brcs	.+16     	; 0x74c <__ltsf2+0x56>
     73c:	89 89       	ldd	r24, Y+17	; 0x11
     73e:	82 30       	cpi	r24, 0x02	; 2
     740:	28 f0       	brcs	.+10     	; 0x74c <__ltsf2+0x56>
     742:	c7 01       	movw	r24, r14
     744:	b8 01       	movw	r22, r16
     746:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fpcmp_parts_f>
     74a:	01 c0       	rjmp	.+2      	; 0x74e <__ltsf2+0x58>
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	68 96       	adiw	r28, 0x18	; 24
     750:	e6 e0       	ldi	r30, 0x06	; 6
     752:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__epilogue_restores__+0x18>

00000756 <__fixsfsi>:
     756:	ac e0       	ldi	r26, 0x0C	; 12
     758:	b0 e0       	ldi	r27, 0x00	; 0
     75a:	e1 eb       	ldi	r30, 0xB1	; 177
     75c:	f3 e0       	ldi	r31, 0x03	; 3
     75e:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__prologue_saves__+0x20>
     762:	69 83       	std	Y+1, r22	; 0x01
     764:	7a 83       	std	Y+2, r23	; 0x02
     766:	8b 83       	std	Y+3, r24	; 0x03
     768:	9c 83       	std	Y+4, r25	; 0x04
     76a:	ce 01       	movw	r24, r28
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	be 01       	movw	r22, r28
     770:	6b 5f       	subi	r22, 0xFB	; 251
     772:	7f 4f       	sbci	r23, 0xFF	; 255
     774:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     778:	8d 81       	ldd	r24, Y+5	; 0x05
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	61 f1       	breq	.+88     	; 0x7d6 <__fixsfsi+0x80>
     77e:	82 30       	cpi	r24, 0x02	; 2
     780:	50 f1       	brcs	.+84     	; 0x7d6 <__fixsfsi+0x80>
     782:	84 30       	cpi	r24, 0x04	; 4
     784:	21 f4       	brne	.+8      	; 0x78e <__fixsfsi+0x38>
     786:	8e 81       	ldd	r24, Y+6	; 0x06
     788:	88 23       	and	r24, r24
     78a:	51 f1       	breq	.+84     	; 0x7e0 <__fixsfsi+0x8a>
     78c:	2e c0       	rjmp	.+92     	; 0x7ea <__fixsfsi+0x94>
     78e:	2f 81       	ldd	r18, Y+7	; 0x07
     790:	38 85       	ldd	r19, Y+8	; 0x08
     792:	37 fd       	sbrc	r19, 7
     794:	20 c0       	rjmp	.+64     	; 0x7d6 <__fixsfsi+0x80>
     796:	6e 81       	ldd	r22, Y+6	; 0x06
     798:	2f 31       	cpi	r18, 0x1F	; 31
     79a:	31 05       	cpc	r19, r1
     79c:	1c f0       	brlt	.+6      	; 0x7a4 <__fixsfsi+0x4e>
     79e:	66 23       	and	r22, r22
     7a0:	f9 f0       	breq	.+62     	; 0x7e0 <__fixsfsi+0x8a>
     7a2:	23 c0       	rjmp	.+70     	; 0x7ea <__fixsfsi+0x94>
     7a4:	8e e1       	ldi	r24, 0x1E	; 30
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	82 1b       	sub	r24, r18
     7aa:	93 0b       	sbc	r25, r19
     7ac:	29 85       	ldd	r18, Y+9	; 0x09
     7ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     7b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     7b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b4:	04 c0       	rjmp	.+8      	; 0x7be <__fixsfsi+0x68>
     7b6:	56 95       	lsr	r21
     7b8:	47 95       	ror	r20
     7ba:	37 95       	ror	r19
     7bc:	27 95       	ror	r18
     7be:	8a 95       	dec	r24
     7c0:	d2 f7       	brpl	.-12     	; 0x7b6 <__fixsfsi+0x60>
     7c2:	66 23       	and	r22, r22
     7c4:	b1 f0       	breq	.+44     	; 0x7f2 <__fixsfsi+0x9c>
     7c6:	50 95       	com	r21
     7c8:	40 95       	com	r20
     7ca:	30 95       	com	r19
     7cc:	21 95       	neg	r18
     7ce:	3f 4f       	sbci	r19, 0xFF	; 255
     7d0:	4f 4f       	sbci	r20, 0xFF	; 255
     7d2:	5f 4f       	sbci	r21, 0xFF	; 255
     7d4:	0e c0       	rjmp	.+28     	; 0x7f2 <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	09 c0       	rjmp	.+18     	; 0x7f2 <__fixsfsi+0x9c>
     7e0:	2f ef       	ldi	r18, 0xFF	; 255
     7e2:	3f ef       	ldi	r19, 0xFF	; 255
     7e4:	4f ef       	ldi	r20, 0xFF	; 255
     7e6:	5f e7       	ldi	r21, 0x7F	; 127
     7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <__fixsfsi+0x9c>
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	40 e0       	ldi	r20, 0x00	; 0
     7f0:	50 e8       	ldi	r21, 0x80	; 128
     7f2:	b9 01       	movw	r22, r18
     7f4:	ca 01       	movw	r24, r20
     7f6:	2c 96       	adiw	r28, 0x0c	; 12
     7f8:	e2 e0       	ldi	r30, 0x02	; 2
     7fa:	0c 94 df 10 	jmp	0x21be	; 0x21be <__epilogue_restores__+0x20>

000007fe <__pack_f>:
     7fe:	df 92       	push	r13
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	fc 01       	movw	r30, r24
     80a:	e4 80       	ldd	r14, Z+4	; 0x04
     80c:	f5 80       	ldd	r15, Z+5	; 0x05
     80e:	06 81       	ldd	r16, Z+6	; 0x06
     810:	17 81       	ldd	r17, Z+7	; 0x07
     812:	d1 80       	ldd	r13, Z+1	; 0x01
     814:	80 81       	ld	r24, Z
     816:	82 30       	cpi	r24, 0x02	; 2
     818:	48 f4       	brcc	.+18     	; 0x82c <__pack_f+0x2e>
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	a0 e1       	ldi	r26, 0x10	; 16
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	e8 2a       	or	r14, r24
     824:	f9 2a       	or	r15, r25
     826:	0a 2b       	or	r16, r26
     828:	1b 2b       	or	r17, r27
     82a:	a5 c0       	rjmp	.+330    	; 0x976 <__stack+0x77>
     82c:	84 30       	cpi	r24, 0x04	; 4
     82e:	09 f4       	brne	.+2      	; 0x832 <__pack_f+0x34>
     830:	9f c0       	rjmp	.+318    	; 0x970 <__stack+0x71>
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	21 f4       	brne	.+8      	; 0x83e <__pack_f+0x40>
     836:	ee 24       	eor	r14, r14
     838:	ff 24       	eor	r15, r15
     83a:	87 01       	movw	r16, r14
     83c:	05 c0       	rjmp	.+10     	; 0x848 <__pack_f+0x4a>
     83e:	e1 14       	cp	r14, r1
     840:	f1 04       	cpc	r15, r1
     842:	01 05       	cpc	r16, r1
     844:	11 05       	cpc	r17, r1
     846:	19 f4       	brne	.+6      	; 0x84e <__pack_f+0x50>
     848:	e0 e0       	ldi	r30, 0x00	; 0
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	96 c0       	rjmp	.+300    	; 0x97a <__stack+0x7b>
     84e:	62 81       	ldd	r22, Z+2	; 0x02
     850:	73 81       	ldd	r23, Z+3	; 0x03
     852:	9f ef       	ldi	r25, 0xFF	; 255
     854:	62 38       	cpi	r22, 0x82	; 130
     856:	79 07       	cpc	r23, r25
     858:	0c f0       	brlt	.+2      	; 0x85c <__pack_f+0x5e>
     85a:	5b c0       	rjmp	.+182    	; 0x912 <__stack+0x13>
     85c:	22 e8       	ldi	r18, 0x82	; 130
     85e:	3f ef       	ldi	r19, 0xFF	; 255
     860:	26 1b       	sub	r18, r22
     862:	37 0b       	sbc	r19, r23
     864:	2a 31       	cpi	r18, 0x1A	; 26
     866:	31 05       	cpc	r19, r1
     868:	2c f0       	brlt	.+10     	; 0x874 <__pack_f+0x76>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	2a c0       	rjmp	.+84     	; 0x8c8 <__pack_f+0xca>
     874:	b8 01       	movw	r22, r16
     876:	a7 01       	movw	r20, r14
     878:	02 2e       	mov	r0, r18
     87a:	04 c0       	rjmp	.+8      	; 0x884 <__pack_f+0x86>
     87c:	76 95       	lsr	r23
     87e:	67 95       	ror	r22
     880:	57 95       	ror	r21
     882:	47 95       	ror	r20
     884:	0a 94       	dec	r0
     886:	d2 f7       	brpl	.-12     	; 0x87c <__pack_f+0x7e>
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	04 c0       	rjmp	.+8      	; 0x89a <__pack_f+0x9c>
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	aa 1f       	adc	r26, r26
     898:	bb 1f       	adc	r27, r27
     89a:	2a 95       	dec	r18
     89c:	d2 f7       	brpl	.-12     	; 0x892 <__pack_f+0x94>
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	a1 09       	sbc	r26, r1
     8a2:	b1 09       	sbc	r27, r1
     8a4:	8e 21       	and	r24, r14
     8a6:	9f 21       	and	r25, r15
     8a8:	a0 23       	and	r26, r16
     8aa:	b1 23       	and	r27, r17
     8ac:	00 97       	sbiw	r24, 0x00	; 0
     8ae:	a1 05       	cpc	r26, r1
     8b0:	b1 05       	cpc	r27, r1
     8b2:	21 f0       	breq	.+8      	; 0x8bc <__pack_f+0xbe>
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	a0 e0       	ldi	r26, 0x00	; 0
     8ba:	b0 e0       	ldi	r27, 0x00	; 0
     8bc:	9a 01       	movw	r18, r20
     8be:	ab 01       	movw	r20, r22
     8c0:	28 2b       	or	r18, r24
     8c2:	39 2b       	or	r19, r25
     8c4:	4a 2b       	or	r20, r26
     8c6:	5b 2b       	or	r21, r27
     8c8:	da 01       	movw	r26, r20
     8ca:	c9 01       	movw	r24, r18
     8cc:	8f 77       	andi	r24, 0x7F	; 127
     8ce:	90 70       	andi	r25, 0x00	; 0
     8d0:	a0 70       	andi	r26, 0x00	; 0
     8d2:	b0 70       	andi	r27, 0x00	; 0
     8d4:	80 34       	cpi	r24, 0x40	; 64
     8d6:	91 05       	cpc	r25, r1
     8d8:	a1 05       	cpc	r26, r1
     8da:	b1 05       	cpc	r27, r1
     8dc:	39 f4       	brne	.+14     	; 0x8ec <__pack_f+0xee>
     8de:	27 ff       	sbrs	r18, 7
     8e0:	09 c0       	rjmp	.+18     	; 0x8f4 <__pack_f+0xf6>
     8e2:	20 5c       	subi	r18, 0xC0	; 192
     8e4:	3f 4f       	sbci	r19, 0xFF	; 255
     8e6:	4f 4f       	sbci	r20, 0xFF	; 255
     8e8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <__pack_f+0xf6>
     8ec:	21 5c       	subi	r18, 0xC1	; 193
     8ee:	3f 4f       	sbci	r19, 0xFF	; 255
     8f0:	4f 4f       	sbci	r20, 0xFF	; 255
     8f2:	5f 4f       	sbci	r21, 0xFF	; 255
     8f4:	e0 e0       	ldi	r30, 0x00	; 0
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	20 30       	cpi	r18, 0x00	; 0
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	3a 07       	cpc	r19, r26
     8fe:	a0 e0       	ldi	r26, 0x00	; 0
     900:	4a 07       	cpc	r20, r26
     902:	a0 e4       	ldi	r26, 0x40	; 64
     904:	5a 07       	cpc	r21, r26
     906:	10 f0       	brcs	.+4      	; 0x90c <__stack+0xd>
     908:	e1 e0       	ldi	r30, 0x01	; 1
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	79 01       	movw	r14, r18
     90e:	8a 01       	movw	r16, r20
     910:	27 c0       	rjmp	.+78     	; 0x960 <__stack+0x61>
     912:	60 38       	cpi	r22, 0x80	; 128
     914:	71 05       	cpc	r23, r1
     916:	64 f5       	brge	.+88     	; 0x970 <__stack+0x71>
     918:	fb 01       	movw	r30, r22
     91a:	e1 58       	subi	r30, 0x81	; 129
     91c:	ff 4f       	sbci	r31, 0xFF	; 255
     91e:	d8 01       	movw	r26, r16
     920:	c7 01       	movw	r24, r14
     922:	8f 77       	andi	r24, 0x7F	; 127
     924:	90 70       	andi	r25, 0x00	; 0
     926:	a0 70       	andi	r26, 0x00	; 0
     928:	b0 70       	andi	r27, 0x00	; 0
     92a:	80 34       	cpi	r24, 0x40	; 64
     92c:	91 05       	cpc	r25, r1
     92e:	a1 05       	cpc	r26, r1
     930:	b1 05       	cpc	r27, r1
     932:	39 f4       	brne	.+14     	; 0x942 <__stack+0x43>
     934:	e7 fe       	sbrs	r14, 7
     936:	0d c0       	rjmp	.+26     	; 0x952 <__stack+0x53>
     938:	80 e4       	ldi	r24, 0x40	; 64
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	04 c0       	rjmp	.+8      	; 0x94a <__stack+0x4b>
     942:	8f e3       	ldi	r24, 0x3F	; 63
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	a0 e0       	ldi	r26, 0x00	; 0
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	e8 0e       	add	r14, r24
     94c:	f9 1e       	adc	r15, r25
     94e:	0a 1f       	adc	r16, r26
     950:	1b 1f       	adc	r17, r27
     952:	17 ff       	sbrs	r17, 7
     954:	05 c0       	rjmp	.+10     	; 0x960 <__stack+0x61>
     956:	16 95       	lsr	r17
     958:	07 95       	ror	r16
     95a:	f7 94       	ror	r15
     95c:	e7 94       	ror	r14
     95e:	31 96       	adiw	r30, 0x01	; 1
     960:	87 e0       	ldi	r24, 0x07	; 7
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d1 f7       	brne	.-12     	; 0x962 <__stack+0x63>
     96e:	05 c0       	rjmp	.+10     	; 0x97a <__stack+0x7b>
     970:	ee 24       	eor	r14, r14
     972:	ff 24       	eor	r15, r15
     974:	87 01       	movw	r16, r14
     976:	ef ef       	ldi	r30, 0xFF	; 255
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	6e 2f       	mov	r22, r30
     97c:	67 95       	ror	r22
     97e:	66 27       	eor	r22, r22
     980:	67 95       	ror	r22
     982:	90 2f       	mov	r25, r16
     984:	9f 77       	andi	r25, 0x7F	; 127
     986:	d7 94       	ror	r13
     988:	dd 24       	eor	r13, r13
     98a:	d7 94       	ror	r13
     98c:	8e 2f       	mov	r24, r30
     98e:	86 95       	lsr	r24
     990:	49 2f       	mov	r20, r25
     992:	46 2b       	or	r20, r22
     994:	58 2f       	mov	r21, r24
     996:	5d 29       	or	r21, r13
     998:	b7 01       	movw	r22, r14
     99a:	ca 01       	movw	r24, r20
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	df 90       	pop	r13
     9a6:	08 95       	ret

000009a8 <__unpack_f>:
     9a8:	fc 01       	movw	r30, r24
     9aa:	db 01       	movw	r26, r22
     9ac:	40 81       	ld	r20, Z
     9ae:	51 81       	ldd	r21, Z+1	; 0x01
     9b0:	22 81       	ldd	r18, Z+2	; 0x02
     9b2:	62 2f       	mov	r22, r18
     9b4:	6f 77       	andi	r22, 0x7F	; 127
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	22 1f       	adc	r18, r18
     9ba:	22 27       	eor	r18, r18
     9bc:	22 1f       	adc	r18, r18
     9be:	93 81       	ldd	r25, Z+3	; 0x03
     9c0:	89 2f       	mov	r24, r25
     9c2:	88 0f       	add	r24, r24
     9c4:	82 2b       	or	r24, r18
     9c6:	28 2f       	mov	r18, r24
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	99 1f       	adc	r25, r25
     9cc:	99 27       	eor	r25, r25
     9ce:	99 1f       	adc	r25, r25
     9d0:	11 96       	adiw	r26, 0x01	; 1
     9d2:	9c 93       	st	X, r25
     9d4:	11 97       	sbiw	r26, 0x01	; 1
     9d6:	21 15       	cp	r18, r1
     9d8:	31 05       	cpc	r19, r1
     9da:	a9 f5       	brne	.+106    	; 0xa46 <__unpack_f+0x9e>
     9dc:	41 15       	cp	r20, r1
     9de:	51 05       	cpc	r21, r1
     9e0:	61 05       	cpc	r22, r1
     9e2:	71 05       	cpc	r23, r1
     9e4:	11 f4       	brne	.+4      	; 0x9ea <__unpack_f+0x42>
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	37 c0       	rjmp	.+110    	; 0xa58 <__unpack_f+0xb0>
     9ea:	82 e8       	ldi	r24, 0x82	; 130
     9ec:	9f ef       	ldi	r25, 0xFF	; 255
     9ee:	13 96       	adiw	r26, 0x03	; 3
     9f0:	9c 93       	st	X, r25
     9f2:	8e 93       	st	-X, r24
     9f4:	12 97       	sbiw	r26, 0x02	; 2
     9f6:	9a 01       	movw	r18, r20
     9f8:	ab 01       	movw	r20, r22
     9fa:	67 e0       	ldi	r22, 0x07	; 7
     9fc:	22 0f       	add	r18, r18
     9fe:	33 1f       	adc	r19, r19
     a00:	44 1f       	adc	r20, r20
     a02:	55 1f       	adc	r21, r21
     a04:	6a 95       	dec	r22
     a06:	d1 f7       	brne	.-12     	; 0x9fc <__unpack_f+0x54>
     a08:	83 e0       	ldi	r24, 0x03	; 3
     a0a:	8c 93       	st	X, r24
     a0c:	0d c0       	rjmp	.+26     	; 0xa28 <__unpack_f+0x80>
     a0e:	22 0f       	add	r18, r18
     a10:	33 1f       	adc	r19, r19
     a12:	44 1f       	adc	r20, r20
     a14:	55 1f       	adc	r21, r21
     a16:	12 96       	adiw	r26, 0x02	; 2
     a18:	8d 91       	ld	r24, X+
     a1a:	9c 91       	ld	r25, X
     a1c:	13 97       	sbiw	r26, 0x03	; 3
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	13 96       	adiw	r26, 0x03	; 3
     a22:	9c 93       	st	X, r25
     a24:	8e 93       	st	-X, r24
     a26:	12 97       	sbiw	r26, 0x02	; 2
     a28:	20 30       	cpi	r18, 0x00	; 0
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	38 07       	cpc	r19, r24
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	48 07       	cpc	r20, r24
     a32:	80 e4       	ldi	r24, 0x40	; 64
     a34:	58 07       	cpc	r21, r24
     a36:	58 f3       	brcs	.-42     	; 0xa0e <__unpack_f+0x66>
     a38:	14 96       	adiw	r26, 0x04	; 4
     a3a:	2d 93       	st	X+, r18
     a3c:	3d 93       	st	X+, r19
     a3e:	4d 93       	st	X+, r20
     a40:	5c 93       	st	X, r21
     a42:	17 97       	sbiw	r26, 0x07	; 7
     a44:	08 95       	ret
     a46:	2f 3f       	cpi	r18, 0xFF	; 255
     a48:	31 05       	cpc	r19, r1
     a4a:	79 f4       	brne	.+30     	; 0xa6a <__unpack_f+0xc2>
     a4c:	41 15       	cp	r20, r1
     a4e:	51 05       	cpc	r21, r1
     a50:	61 05       	cpc	r22, r1
     a52:	71 05       	cpc	r23, r1
     a54:	19 f4       	brne	.+6      	; 0xa5c <__unpack_f+0xb4>
     a56:	84 e0       	ldi	r24, 0x04	; 4
     a58:	8c 93       	st	X, r24
     a5a:	08 95       	ret
     a5c:	64 ff       	sbrs	r22, 4
     a5e:	03 c0       	rjmp	.+6      	; 0xa66 <__unpack_f+0xbe>
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	8c 93       	st	X, r24
     a64:	12 c0       	rjmp	.+36     	; 0xa8a <__unpack_f+0xe2>
     a66:	1c 92       	st	X, r1
     a68:	10 c0       	rjmp	.+32     	; 0xa8a <__unpack_f+0xe2>
     a6a:	2f 57       	subi	r18, 0x7F	; 127
     a6c:	30 40       	sbci	r19, 0x00	; 0
     a6e:	13 96       	adiw	r26, 0x03	; 3
     a70:	3c 93       	st	X, r19
     a72:	2e 93       	st	-X, r18
     a74:	12 97       	sbiw	r26, 0x02	; 2
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	8c 93       	st	X, r24
     a7a:	87 e0       	ldi	r24, 0x07	; 7
     a7c:	44 0f       	add	r20, r20
     a7e:	55 1f       	adc	r21, r21
     a80:	66 1f       	adc	r22, r22
     a82:	77 1f       	adc	r23, r23
     a84:	8a 95       	dec	r24
     a86:	d1 f7       	brne	.-12     	; 0xa7c <__unpack_f+0xd4>
     a88:	70 64       	ori	r23, 0x40	; 64
     a8a:	14 96       	adiw	r26, 0x04	; 4
     a8c:	4d 93       	st	X+, r20
     a8e:	5d 93       	st	X+, r21
     a90:	6d 93       	st	X+, r22
     a92:	7c 93       	st	X, r23
     a94:	17 97       	sbiw	r26, 0x07	; 7
     a96:	08 95       	ret

00000a98 <__fpcmp_parts_f>:
     a98:	1f 93       	push	r17
     a9a:	dc 01       	movw	r26, r24
     a9c:	fb 01       	movw	r30, r22
     a9e:	9c 91       	ld	r25, X
     aa0:	92 30       	cpi	r25, 0x02	; 2
     aa2:	08 f4       	brcc	.+2      	; 0xaa6 <__fpcmp_parts_f+0xe>
     aa4:	47 c0       	rjmp	.+142    	; 0xb34 <__fpcmp_parts_f+0x9c>
     aa6:	80 81       	ld	r24, Z
     aa8:	82 30       	cpi	r24, 0x02	; 2
     aaa:	08 f4       	brcc	.+2      	; 0xaae <__fpcmp_parts_f+0x16>
     aac:	43 c0       	rjmp	.+134    	; 0xb34 <__fpcmp_parts_f+0x9c>
     aae:	94 30       	cpi	r25, 0x04	; 4
     ab0:	51 f4       	brne	.+20     	; 0xac6 <__fpcmp_parts_f+0x2e>
     ab2:	11 96       	adiw	r26, 0x01	; 1
     ab4:	1c 91       	ld	r17, X
     ab6:	84 30       	cpi	r24, 0x04	; 4
     ab8:	99 f5       	brne	.+102    	; 0xb20 <__fpcmp_parts_f+0x88>
     aba:	81 81       	ldd	r24, Z+1	; 0x01
     abc:	68 2f       	mov	r22, r24
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	61 1b       	sub	r22, r17
     ac2:	71 09       	sbc	r23, r1
     ac4:	3f c0       	rjmp	.+126    	; 0xb44 <__fpcmp_parts_f+0xac>
     ac6:	84 30       	cpi	r24, 0x04	; 4
     ac8:	21 f0       	breq	.+8      	; 0xad2 <__fpcmp_parts_f+0x3a>
     aca:	92 30       	cpi	r25, 0x02	; 2
     acc:	31 f4       	brne	.+12     	; 0xada <__fpcmp_parts_f+0x42>
     ace:	82 30       	cpi	r24, 0x02	; 2
     ad0:	b9 f1       	breq	.+110    	; 0xb40 <__fpcmp_parts_f+0xa8>
     ad2:	81 81       	ldd	r24, Z+1	; 0x01
     ad4:	88 23       	and	r24, r24
     ad6:	89 f1       	breq	.+98     	; 0xb3a <__fpcmp_parts_f+0xa2>
     ad8:	2d c0       	rjmp	.+90     	; 0xb34 <__fpcmp_parts_f+0x9c>
     ada:	11 96       	adiw	r26, 0x01	; 1
     adc:	1c 91       	ld	r17, X
     ade:	11 97       	sbiw	r26, 0x01	; 1
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	f1 f0       	breq	.+60     	; 0xb20 <__fpcmp_parts_f+0x88>
     ae4:	81 81       	ldd	r24, Z+1	; 0x01
     ae6:	18 17       	cp	r17, r24
     ae8:	d9 f4       	brne	.+54     	; 0xb20 <__fpcmp_parts_f+0x88>
     aea:	12 96       	adiw	r26, 0x02	; 2
     aec:	2d 91       	ld	r18, X+
     aee:	3c 91       	ld	r19, X
     af0:	13 97       	sbiw	r26, 0x03	; 3
     af2:	82 81       	ldd	r24, Z+2	; 0x02
     af4:	93 81       	ldd	r25, Z+3	; 0x03
     af6:	82 17       	cp	r24, r18
     af8:	93 07       	cpc	r25, r19
     afa:	94 f0       	brlt	.+36     	; 0xb20 <__fpcmp_parts_f+0x88>
     afc:	28 17       	cp	r18, r24
     afe:	39 07       	cpc	r19, r25
     b00:	bc f0       	brlt	.+46     	; 0xb30 <__fpcmp_parts_f+0x98>
     b02:	14 96       	adiw	r26, 0x04	; 4
     b04:	8d 91       	ld	r24, X+
     b06:	9d 91       	ld	r25, X+
     b08:	0d 90       	ld	r0, X+
     b0a:	bc 91       	ld	r27, X
     b0c:	a0 2d       	mov	r26, r0
     b0e:	24 81       	ldd	r18, Z+4	; 0x04
     b10:	35 81       	ldd	r19, Z+5	; 0x05
     b12:	46 81       	ldd	r20, Z+6	; 0x06
     b14:	57 81       	ldd	r21, Z+7	; 0x07
     b16:	28 17       	cp	r18, r24
     b18:	39 07       	cpc	r19, r25
     b1a:	4a 07       	cpc	r20, r26
     b1c:	5b 07       	cpc	r21, r27
     b1e:	18 f4       	brcc	.+6      	; 0xb26 <__fpcmp_parts_f+0x8e>
     b20:	11 23       	and	r17, r17
     b22:	41 f0       	breq	.+16     	; 0xb34 <__fpcmp_parts_f+0x9c>
     b24:	0a c0       	rjmp	.+20     	; 0xb3a <__fpcmp_parts_f+0xa2>
     b26:	82 17       	cp	r24, r18
     b28:	93 07       	cpc	r25, r19
     b2a:	a4 07       	cpc	r26, r20
     b2c:	b5 07       	cpc	r27, r21
     b2e:	40 f4       	brcc	.+16     	; 0xb40 <__fpcmp_parts_f+0xa8>
     b30:	11 23       	and	r17, r17
     b32:	19 f0       	breq	.+6      	; 0xb3a <__fpcmp_parts_f+0xa2>
     b34:	61 e0       	ldi	r22, 0x01	; 1
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	05 c0       	rjmp	.+10     	; 0xb44 <__fpcmp_parts_f+0xac>
     b3a:	6f ef       	ldi	r22, 0xFF	; 255
     b3c:	7f ef       	ldi	r23, 0xFF	; 255
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <__fpcmp_parts_f+0xac>
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	cb 01       	movw	r24, r22
     b46:	1f 91       	pop	r17
     b48:	08 95       	ret

00000b4a <CLCD_voidSendCommand>:
#include "CLCD_interface.h"
#include "CLCD_private.h"
#include <util/delay.h>


void CLCD_voidSendCommand(u8 Copy_u8Command){
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	e9 97       	sbiw	r28, 0x39	; 57
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	89 af       	std	Y+57, r24	; 0x39
	/*set RS pin to low*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <DIO_u8SetPinValue>
	//4-bit implementation
	//send most sig bits first

	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command>>4);
     b74:	89 ad       	ldd	r24, Y+57	; 0x39
     b76:	98 2f       	mov	r25, r24
     b78:	92 95       	swap	r25
     b7a:	9f 70       	andi	r25, 0x0F	; 15
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	69 2f       	mov	r22, r25
     b80:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_u8SetPortValue>

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);/*sent enable pulse*/
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	62 e0       	ldi	r22, 0x02	; 2
     b88:	41 e0       	ldi	r20, 0x01	; 1
     b8a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <DIO_u8SetPinValue>
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a0 e0       	ldi	r26, 0x00	; 0
     b94:	b0 e4       	ldi	r27, 0x40	; 64
     b96:	8d ab       	std	Y+53, r24	; 0x35
     b98:	9e ab       	std	Y+54, r25	; 0x36
     b9a:	af ab       	std	Y+55, r26	; 0x37
     b9c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b9e:	6d a9       	ldd	r22, Y+53	; 0x35
     ba0:	7e a9       	ldd	r23, Y+54	; 0x36
     ba2:	8f a9       	ldd	r24, Y+55	; 0x37
     ba4:	98 ad       	ldd	r25, Y+56	; 0x38
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	4a ef       	ldi	r20, 0xFA	; 250
     bac:	54 e4       	ldi	r21, 0x44	; 68
     bae:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     bb2:	dc 01       	movw	r26, r24
     bb4:	cb 01       	movw	r24, r22
     bb6:	89 ab       	std	Y+49, r24	; 0x31
     bb8:	9a ab       	std	Y+50, r25	; 0x32
     bba:	ab ab       	std	Y+51, r26	; 0x33
     bbc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     bbe:	69 a9       	ldd	r22, Y+49	; 0x31
     bc0:	7a a9       	ldd	r23, Y+50	; 0x32
     bc2:	8b a9       	ldd	r24, Y+51	; 0x33
     bc4:	9c a9       	ldd	r25, Y+52	; 0x34
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	40 e8       	ldi	r20, 0x80	; 128
     bcc:	5f e3       	ldi	r21, 0x3F	; 63
     bce:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
     bd2:	88 23       	and	r24, r24
     bd4:	2c f4       	brge	.+10     	; 0xbe0 <CLCD_voidSendCommand+0x96>
		__ticks = 1;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	98 ab       	std	Y+48, r25	; 0x30
     bdc:	8f a7       	std	Y+47, r24	; 0x2f
     bde:	3f c0       	rjmp	.+126    	; 0xc5e <CLCD_voidSendCommand+0x114>
	else if (__tmp > 65535)
     be0:	69 a9       	ldd	r22, Y+49	; 0x31
     be2:	7a a9       	ldd	r23, Y+50	; 0x32
     be4:	8b a9       	ldd	r24, Y+51	; 0x33
     be6:	9c a9       	ldd	r25, Y+52	; 0x34
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	3f ef       	ldi	r19, 0xFF	; 255
     bec:	4f e7       	ldi	r20, 0x7F	; 127
     bee:	57 e4       	ldi	r21, 0x47	; 71
     bf0:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
     bf4:	18 16       	cp	r1, r24
     bf6:	4c f5       	brge	.+82     	; 0xc4a <CLCD_voidSendCommand+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf8:	6d a9       	ldd	r22, Y+53	; 0x35
     bfa:	7e a9       	ldd	r23, Y+54	; 0x36
     bfc:	8f a9       	ldd	r24, Y+55	; 0x37
     bfe:	98 ad       	ldd	r25, Y+56	; 0x38
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e2       	ldi	r20, 0x20	; 32
     c06:	51 e4       	ldi	r21, 0x41	; 65
     c08:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	bc 01       	movw	r22, r24
     c12:	cd 01       	movw	r24, r26
     c14:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	98 ab       	std	Y+48, r25	; 0x30
     c1e:	8f a7       	std	Y+47, r24	; 0x2f
     c20:	0f c0       	rjmp	.+30     	; 0xc40 <CLCD_voidSendCommand+0xf6>
     c22:	88 ec       	ldi	r24, 0xC8	; 200
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	9e a7       	std	Y+46, r25	; 0x2e
     c28:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c2a:	8d a5       	ldd	r24, Y+45	; 0x2d
     c2c:	9e a5       	ldd	r25, Y+46	; 0x2e
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <CLCD_voidSendCommand+0xe4>
     c32:	9e a7       	std	Y+46, r25	; 0x2e
     c34:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c36:	8f a5       	ldd	r24, Y+47	; 0x2f
     c38:	98 a9       	ldd	r25, Y+48	; 0x30
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	98 ab       	std	Y+48, r25	; 0x30
     c3e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c40:	8f a5       	ldd	r24, Y+47	; 0x2f
     c42:	98 a9       	ldd	r25, Y+48	; 0x30
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	69 f7       	brne	.-38     	; 0xc22 <CLCD_voidSendCommand+0xd8>
     c48:	14 c0       	rjmp	.+40     	; 0xc72 <CLCD_voidSendCommand+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c4a:	69 a9       	ldd	r22, Y+49	; 0x31
     c4c:	7a a9       	ldd	r23, Y+50	; 0x32
     c4e:	8b a9       	ldd	r24, Y+51	; 0x33
     c50:	9c a9       	ldd	r25, Y+52	; 0x34
     c52:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	98 ab       	std	Y+48, r25	; 0x30
     c5c:	8f a7       	std	Y+47, r24	; 0x2f
     c5e:	8f a5       	ldd	r24, Y+47	; 0x2f
     c60:	98 a9       	ldd	r25, Y+48	; 0x30
     c62:	9c a7       	std	Y+44, r25	; 0x2c
     c64:	8b a7       	std	Y+43, r24	; 0x2b
     c66:	8b a5       	ldd	r24, Y+43	; 0x2b
     c68:	9c a5       	ldd	r25, Y+44	; 0x2c
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <CLCD_voidSendCommand+0x120>
     c6e:	9c a7       	std	Y+44, r25	; 0x2c
     c70:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);/*sent enable pulse*/
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	62 e0       	ldi	r22, 0x02	; 2
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <DIO_u8SetPinValue>
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e4       	ldi	r27, 0x40	; 64
     c84:	8f a3       	std	Y+39, r24	; 0x27
     c86:	98 a7       	std	Y+40, r25	; 0x28
     c88:	a9 a7       	std	Y+41, r26	; 0x29
     c8a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c8c:	6f a1       	ldd	r22, Y+39	; 0x27
     c8e:	78 a5       	ldd	r23, Y+40	; 0x28
     c90:	89 a5       	ldd	r24, Y+41	; 0x29
     c92:	9a a5       	ldd	r25, Y+42	; 0x2a
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	4a ef       	ldi	r20, 0xFA	; 250
     c9a:	54 e4       	ldi	r21, 0x44	; 68
     c9c:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	8b a3       	std	Y+35, r24	; 0x23
     ca6:	9c a3       	std	Y+36, r25	; 0x24
     ca8:	ad a3       	std	Y+37, r26	; 0x25
     caa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     cac:	6b a1       	ldd	r22, Y+35	; 0x23
     cae:	7c a1       	ldd	r23, Y+36	; 0x24
     cb0:	8d a1       	ldd	r24, Y+37	; 0x25
     cb2:	9e a1       	ldd	r25, Y+38	; 0x26
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	40 e8       	ldi	r20, 0x80	; 128
     cba:	5f e3       	ldi	r21, 0x3F	; 63
     cbc:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
     cc0:	88 23       	and	r24, r24
     cc2:	2c f4       	brge	.+10     	; 0xcce <CLCD_voidSendCommand+0x184>
		__ticks = 1;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	9a a3       	std	Y+34, r25	; 0x22
     cca:	89 a3       	std	Y+33, r24	; 0x21
     ccc:	3f c0       	rjmp	.+126    	; 0xd4c <CLCD_voidSendCommand+0x202>
	else if (__tmp > 65535)
     cce:	6b a1       	ldd	r22, Y+35	; 0x23
     cd0:	7c a1       	ldd	r23, Y+36	; 0x24
     cd2:	8d a1       	ldd	r24, Y+37	; 0x25
     cd4:	9e a1       	ldd	r25, Y+38	; 0x26
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	3f ef       	ldi	r19, 0xFF	; 255
     cda:	4f e7       	ldi	r20, 0x7F	; 127
     cdc:	57 e4       	ldi	r21, 0x47	; 71
     cde:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
     ce2:	18 16       	cp	r1, r24
     ce4:	4c f5       	brge	.+82     	; 0xd38 <CLCD_voidSendCommand+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ce6:	6f a1       	ldd	r22, Y+39	; 0x27
     ce8:	78 a5       	ldd	r23, Y+40	; 0x28
     cea:	89 a5       	ldd	r24, Y+41	; 0x29
     cec:	9a a5       	ldd	r25, Y+42	; 0x2a
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	40 e2       	ldi	r20, 0x20	; 32
     cf4:	51 e4       	ldi	r21, 0x41	; 65
     cf6:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	bc 01       	movw	r22, r24
     d00:	cd 01       	movw	r24, r26
     d02:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	9a a3       	std	Y+34, r25	; 0x22
     d0c:	89 a3       	std	Y+33, r24	; 0x21
     d0e:	0f c0       	rjmp	.+30     	; 0xd2e <CLCD_voidSendCommand+0x1e4>
     d10:	88 ec       	ldi	r24, 0xC8	; 200
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	98 a3       	std	Y+32, r25	; 0x20
     d16:	8f 8f       	std	Y+31, r24	; 0x1f
     d18:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d1a:	98 a1       	ldd	r25, Y+32	; 0x20
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	f1 f7       	brne	.-4      	; 0xd1c <CLCD_voidSendCommand+0x1d2>
     d20:	98 a3       	std	Y+32, r25	; 0x20
     d22:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d24:	89 a1       	ldd	r24, Y+33	; 0x21
     d26:	9a a1       	ldd	r25, Y+34	; 0x22
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	9a a3       	std	Y+34, r25	; 0x22
     d2c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	9a a1       	ldd	r25, Y+34	; 0x22
     d32:	00 97       	sbiw	r24, 0x00	; 0
     d34:	69 f7       	brne	.-38     	; 0xd10 <CLCD_voidSendCommand+0x1c6>
     d36:	14 c0       	rjmp	.+40     	; 0xd60 <CLCD_voidSendCommand+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d38:	6b a1       	ldd	r22, Y+35	; 0x23
     d3a:	7c a1       	ldd	r23, Y+36	; 0x24
     d3c:	8d a1       	ldd	r24, Y+37	; 0x25
     d3e:	9e a1       	ldd	r25, Y+38	; 0x26
     d40:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	9a a3       	std	Y+34, r25	; 0x22
     d4a:	89 a3       	std	Y+33, r24	; 0x21
     d4c:	89 a1       	ldd	r24, Y+33	; 0x21
     d4e:	9a a1       	ldd	r25, Y+34	; 0x22
     d50:	9e 8f       	std	Y+30, r25	; 0x1e
     d52:	8d 8f       	std	Y+29, r24	; 0x1d
     d54:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d56:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <CLCD_voidSendCommand+0x20e>
     d5c:	9e 8f       	std	Y+30, r25	; 0x1e
     d5e:	8d 8f       	std	Y+29, r24	; 0x1d


	_delay_ms(2);

	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	69 ad       	ldd	r22, Y+57	; 0x39
     d64:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_u8SetPortValue>

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);/*sent enable pulse*/
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	62 e0       	ldi	r22, 0x02	; 2
     d6c:	41 e0       	ldi	r20, 0x01	; 1
     d6e:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <DIO_u8SetPinValue>
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	a0 e0       	ldi	r26, 0x00	; 0
     d78:	b0 e4       	ldi	r27, 0x40	; 64
     d7a:	89 8f       	std	Y+25, r24	; 0x19
     d7c:	9a 8f       	std	Y+26, r25	; 0x1a
     d7e:	ab 8f       	std	Y+27, r26	; 0x1b
     d80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d82:	69 8d       	ldd	r22, Y+25	; 0x19
     d84:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d86:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d88:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	4a ef       	ldi	r20, 0xFA	; 250
     d90:	54 e4       	ldi	r21, 0x44	; 68
     d92:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	8d 8b       	std	Y+21, r24	; 0x15
     d9c:	9e 8b       	std	Y+22, r25	; 0x16
     d9e:	af 8b       	std	Y+23, r26	; 0x17
     da0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     da2:	6d 89       	ldd	r22, Y+21	; 0x15
     da4:	7e 89       	ldd	r23, Y+22	; 0x16
     da6:	8f 89       	ldd	r24, Y+23	; 0x17
     da8:	98 8d       	ldd	r25, Y+24	; 0x18
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	40 e8       	ldi	r20, 0x80	; 128
     db0:	5f e3       	ldi	r21, 0x3F	; 63
     db2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
     db6:	88 23       	and	r24, r24
     db8:	2c f4       	brge	.+10     	; 0xdc4 <CLCD_voidSendCommand+0x27a>
		__ticks = 1;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	9c 8b       	std	Y+20, r25	; 0x14
     dc0:	8b 8b       	std	Y+19, r24	; 0x13
     dc2:	3f c0       	rjmp	.+126    	; 0xe42 <CLCD_voidSendCommand+0x2f8>
	else if (__tmp > 65535)
     dc4:	6d 89       	ldd	r22, Y+21	; 0x15
     dc6:	7e 89       	ldd	r23, Y+22	; 0x16
     dc8:	8f 89       	ldd	r24, Y+23	; 0x17
     dca:	98 8d       	ldd	r25, Y+24	; 0x18
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	3f ef       	ldi	r19, 0xFF	; 255
     dd0:	4f e7       	ldi	r20, 0x7F	; 127
     dd2:	57 e4       	ldi	r21, 0x47	; 71
     dd4:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
     dd8:	18 16       	cp	r1, r24
     dda:	4c f5       	brge	.+82     	; 0xe2e <CLCD_voidSendCommand+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ddc:	69 8d       	ldd	r22, Y+25	; 0x19
     dde:	7a 8d       	ldd	r23, Y+26	; 0x1a
     de0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     de2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	40 e2       	ldi	r20, 0x20	; 32
     dea:	51 e4       	ldi	r21, 0x41	; 65
     dec:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	bc 01       	movw	r22, r24
     df6:	cd 01       	movw	r24, r26
     df8:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	9c 8b       	std	Y+20, r25	; 0x14
     e02:	8b 8b       	std	Y+19, r24	; 0x13
     e04:	0f c0       	rjmp	.+30     	; 0xe24 <CLCD_voidSendCommand+0x2da>
     e06:	88 ec       	ldi	r24, 0xC8	; 200
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	9a 8b       	std	Y+18, r25	; 0x12
     e0c:	89 8b       	std	Y+17, r24	; 0x11
     e0e:	89 89       	ldd	r24, Y+17	; 0x11
     e10:	9a 89       	ldd	r25, Y+18	; 0x12
     e12:	01 97       	sbiw	r24, 0x01	; 1
     e14:	f1 f7       	brne	.-4      	; 0xe12 <CLCD_voidSendCommand+0x2c8>
     e16:	9a 8b       	std	Y+18, r25	; 0x12
     e18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e1a:	8b 89       	ldd	r24, Y+19	; 0x13
     e1c:	9c 89       	ldd	r25, Y+20	; 0x14
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	9c 8b       	std	Y+20, r25	; 0x14
     e22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e24:	8b 89       	ldd	r24, Y+19	; 0x13
     e26:	9c 89       	ldd	r25, Y+20	; 0x14
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	69 f7       	brne	.-38     	; 0xe06 <CLCD_voidSendCommand+0x2bc>
     e2c:	14 c0       	rjmp	.+40     	; 0xe56 <CLCD_voidSendCommand+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e2e:	6d 89       	ldd	r22, Y+21	; 0x15
     e30:	7e 89       	ldd	r23, Y+22	; 0x16
     e32:	8f 89       	ldd	r24, Y+23	; 0x17
     e34:	98 8d       	ldd	r25, Y+24	; 0x18
     e36:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	9c 8b       	std	Y+20, r25	; 0x14
     e40:	8b 8b       	std	Y+19, r24	; 0x13
     e42:	8b 89       	ldd	r24, Y+19	; 0x13
     e44:	9c 89       	ldd	r25, Y+20	; 0x14
     e46:	98 8b       	std	Y+16, r25	; 0x10
     e48:	8f 87       	std	Y+15, r24	; 0x0f
     e4a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e4c:	98 89       	ldd	r25, Y+16	; 0x10
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <CLCD_voidSendCommand+0x304>
     e52:	98 8b       	std	Y+16, r25	; 0x10
     e54:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);/*sent enable pulse*/
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	62 e0       	ldi	r22, 0x02	; 2
     e5a:	40 e0       	ldi	r20, 0x00	; 0
     e5c:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <DIO_u8SetPinValue>
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	a0 e0       	ldi	r26, 0x00	; 0
     e66:	b0 e4       	ldi	r27, 0x40	; 64
     e68:	8b 87       	std	Y+11, r24	; 0x0b
     e6a:	9c 87       	std	Y+12, r25	; 0x0c
     e6c:	ad 87       	std	Y+13, r26	; 0x0d
     e6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e70:	6b 85       	ldd	r22, Y+11	; 0x0b
     e72:	7c 85       	ldd	r23, Y+12	; 0x0c
     e74:	8d 85       	ldd	r24, Y+13	; 0x0d
     e76:	9e 85       	ldd	r25, Y+14	; 0x0e
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	4a ef       	ldi	r20, 0xFA	; 250
     e7e:	54 e4       	ldi	r21, 0x44	; 68
     e80:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	8f 83       	std	Y+7, r24	; 0x07
     e8a:	98 87       	std	Y+8, r25	; 0x08
     e8c:	a9 87       	std	Y+9, r26	; 0x09
     e8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e90:	6f 81       	ldd	r22, Y+7	; 0x07
     e92:	78 85       	ldd	r23, Y+8	; 0x08
     e94:	89 85       	ldd	r24, Y+9	; 0x09
     e96:	9a 85       	ldd	r25, Y+10	; 0x0a
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e8       	ldi	r20, 0x80	; 128
     e9e:	5f e3       	ldi	r21, 0x3F	; 63
     ea0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
     ea4:	88 23       	and	r24, r24
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <CLCD_voidSendCommand+0x368>
		__ticks = 1;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	9e 83       	std	Y+6, r25	; 0x06
     eae:	8d 83       	std	Y+5, r24	; 0x05
     eb0:	3f c0       	rjmp	.+126    	; 0xf30 <CLCD_voidSendCommand+0x3e6>
	else if (__tmp > 65535)
     eb2:	6f 81       	ldd	r22, Y+7	; 0x07
     eb4:	78 85       	ldd	r23, Y+8	; 0x08
     eb6:	89 85       	ldd	r24, Y+9	; 0x09
     eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	3f ef       	ldi	r19, 0xFF	; 255
     ebe:	4f e7       	ldi	r20, 0x7F	; 127
     ec0:	57 e4       	ldi	r21, 0x47	; 71
     ec2:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
     ec6:	18 16       	cp	r1, r24
     ec8:	4c f5       	brge	.+82     	; 0xf1c <CLCD_voidSendCommand+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eca:	6b 85       	ldd	r22, Y+11	; 0x0b
     ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ece:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e2       	ldi	r20, 0x20	; 32
     ed8:	51 e4       	ldi	r21, 0x41	; 65
     eda:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	9e 83       	std	Y+6, r25	; 0x06
     ef0:	8d 83       	std	Y+5, r24	; 0x05
     ef2:	0f c0       	rjmp	.+30     	; 0xf12 <CLCD_voidSendCommand+0x3c8>
     ef4:	88 ec       	ldi	r24, 0xC8	; 200
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9c 83       	std	Y+4, r25	; 0x04
     efa:	8b 83       	std	Y+3, r24	; 0x03
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <CLCD_voidSendCommand+0x3b6>
     f04:	9c 83       	std	Y+4, r25	; 0x04
     f06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f08:	8d 81       	ldd	r24, Y+5	; 0x05
     f0a:	9e 81       	ldd	r25, Y+6	; 0x06
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	9e 83       	std	Y+6, r25	; 0x06
     f10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	69 f7       	brne	.-38     	; 0xef4 <CLCD_voidSendCommand+0x3aa>
     f1a:	14 c0       	rjmp	.+40     	; 0xf44 <CLCD_voidSendCommand+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1c:	6f 81       	ldd	r22, Y+7	; 0x07
     f1e:	78 85       	ldd	r23, Y+8	; 0x08
     f20:	89 85       	ldd	r24, Y+9	; 0x09
     f22:	9a 85       	ldd	r25, Y+10	; 0x0a
     f24:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	9e 83       	std	Y+6, r25	; 0x06
     f2e:	8d 83       	std	Y+5, r24	; 0x05
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	9a 83       	std	Y+2, r25	; 0x02
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <CLCD_voidSendCommand+0x3f2>
     f40:	9a 83       	std	Y+2, r25	; 0x02
     f42:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);


}
     f44:	e9 96       	adiw	r28, 0x39	; 57
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <CLCD_voidSendData>:


void CLCD_voidSendData(u8 Copy_u8Data){
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	e9 97       	sbiw	r28, 0x39	; 57
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	41 e0       	ldi	r20, 0x01	; 1
     f72:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	61 e0       	ldi	r22, 0x01	; 1
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <DIO_u8SetPinValue>

	//4-bit implement

	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data>>4);
     f80:	89 ad       	ldd	r24, Y+57	; 0x39
     f82:	98 2f       	mov	r25, r24
     f84:	92 95       	swap	r25
     f86:	9f 70       	andi	r25, 0x0F	; 15
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	69 2f       	mov	r22, r25
     f8c:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_u8SetPortValue>

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);/*sent enable pulse*/
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	62 e0       	ldi	r22, 0x02	; 2
     f94:	41 e0       	ldi	r20, 0x01	; 1
     f96:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <DIO_u8SetPinValue>
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	a0 e0       	ldi	r26, 0x00	; 0
     fa0:	b0 e4       	ldi	r27, 0x40	; 64
     fa2:	8d ab       	std	Y+53, r24	; 0x35
     fa4:	9e ab       	std	Y+54, r25	; 0x36
     fa6:	af ab       	std	Y+55, r26	; 0x37
     fa8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     faa:	6d a9       	ldd	r22, Y+53	; 0x35
     fac:	7e a9       	ldd	r23, Y+54	; 0x36
     fae:	8f a9       	ldd	r24, Y+55	; 0x37
     fb0:	98 ad       	ldd	r25, Y+56	; 0x38
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	4a ef       	ldi	r20, 0xFA	; 250
     fb8:	54 e4       	ldi	r21, 0x44	; 68
     fba:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	89 ab       	std	Y+49, r24	; 0x31
     fc4:	9a ab       	std	Y+50, r25	; 0x32
     fc6:	ab ab       	std	Y+51, r26	; 0x33
     fc8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fca:	69 a9       	ldd	r22, Y+49	; 0x31
     fcc:	7a a9       	ldd	r23, Y+50	; 0x32
     fce:	8b a9       	ldd	r24, Y+51	; 0x33
     fd0:	9c a9       	ldd	r25, Y+52	; 0x34
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e8       	ldi	r20, 0x80	; 128
     fd8:	5f e3       	ldi	r21, 0x3F	; 63
     fda:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
     fde:	88 23       	and	r24, r24
     fe0:	2c f4       	brge	.+10     	; 0xfec <CLCD_voidSendData+0x96>
		__ticks = 1;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	98 ab       	std	Y+48, r25	; 0x30
     fe8:	8f a7       	std	Y+47, r24	; 0x2f
     fea:	3f c0       	rjmp	.+126    	; 0x106a <CLCD_voidSendData+0x114>
	else if (__tmp > 65535)
     fec:	69 a9       	ldd	r22, Y+49	; 0x31
     fee:	7a a9       	ldd	r23, Y+50	; 0x32
     ff0:	8b a9       	ldd	r24, Y+51	; 0x33
     ff2:	9c a9       	ldd	r25, Y+52	; 0x34
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	3f ef       	ldi	r19, 0xFF	; 255
     ff8:	4f e7       	ldi	r20, 0x7F	; 127
     ffa:	57 e4       	ldi	r21, 0x47	; 71
     ffc:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1000:	18 16       	cp	r1, r24
    1002:	4c f5       	brge	.+82     	; 0x1056 <CLCD_voidSendData+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1004:	6d a9       	ldd	r22, Y+53	; 0x35
    1006:	7e a9       	ldd	r23, Y+54	; 0x36
    1008:	8f a9       	ldd	r24, Y+55	; 0x37
    100a:	98 ad       	ldd	r25, Y+56	; 0x38
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e2       	ldi	r20, 0x20	; 32
    1012:	51 e4       	ldi	r21, 0x41	; 65
    1014:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	bc 01       	movw	r22, r24
    101e:	cd 01       	movw	r24, r26
    1020:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	98 ab       	std	Y+48, r25	; 0x30
    102a:	8f a7       	std	Y+47, r24	; 0x2f
    102c:	0f c0       	rjmp	.+30     	; 0x104c <CLCD_voidSendData+0xf6>
    102e:	88 ec       	ldi	r24, 0xC8	; 200
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	9e a7       	std	Y+46, r25	; 0x2e
    1034:	8d a7       	std	Y+45, r24	; 0x2d
    1036:	8d a5       	ldd	r24, Y+45	; 0x2d
    1038:	9e a5       	ldd	r25, Y+46	; 0x2e
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <CLCD_voidSendData+0xe4>
    103e:	9e a7       	std	Y+46, r25	; 0x2e
    1040:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1042:	8f a5       	ldd	r24, Y+47	; 0x2f
    1044:	98 a9       	ldd	r25, Y+48	; 0x30
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	98 ab       	std	Y+48, r25	; 0x30
    104a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104c:	8f a5       	ldd	r24, Y+47	; 0x2f
    104e:	98 a9       	ldd	r25, Y+48	; 0x30
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	69 f7       	brne	.-38     	; 0x102e <CLCD_voidSendData+0xd8>
    1054:	14 c0       	rjmp	.+40     	; 0x107e <CLCD_voidSendData+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1056:	69 a9       	ldd	r22, Y+49	; 0x31
    1058:	7a a9       	ldd	r23, Y+50	; 0x32
    105a:	8b a9       	ldd	r24, Y+51	; 0x33
    105c:	9c a9       	ldd	r25, Y+52	; 0x34
    105e:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	98 ab       	std	Y+48, r25	; 0x30
    1068:	8f a7       	std	Y+47, r24	; 0x2f
    106a:	8f a5       	ldd	r24, Y+47	; 0x2f
    106c:	98 a9       	ldd	r25, Y+48	; 0x30
    106e:	9c a7       	std	Y+44, r25	; 0x2c
    1070:	8b a7       	std	Y+43, r24	; 0x2b
    1072:	8b a5       	ldd	r24, Y+43	; 0x2b
    1074:	9c a5       	ldd	r25, Y+44	; 0x2c
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	f1 f7       	brne	.-4      	; 0x1076 <CLCD_voidSendData+0x120>
    107a:	9c a7       	std	Y+44, r25	; 0x2c
    107c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);/*sent enable pulse*/
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	62 e0       	ldi	r22, 0x02	; 2
    1082:	40 e0       	ldi	r20, 0x00	; 0
    1084:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <DIO_u8SetPinValue>
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	a0 e0       	ldi	r26, 0x00	; 0
    108e:	b0 e4       	ldi	r27, 0x40	; 64
    1090:	8f a3       	std	Y+39, r24	; 0x27
    1092:	98 a7       	std	Y+40, r25	; 0x28
    1094:	a9 a7       	std	Y+41, r26	; 0x29
    1096:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1098:	6f a1       	ldd	r22, Y+39	; 0x27
    109a:	78 a5       	ldd	r23, Y+40	; 0x28
    109c:	89 a5       	ldd	r24, Y+41	; 0x29
    109e:	9a a5       	ldd	r25, Y+42	; 0x2a
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	4a ef       	ldi	r20, 0xFA	; 250
    10a6:	54 e4       	ldi	r21, 0x44	; 68
    10a8:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	8b a3       	std	Y+35, r24	; 0x23
    10b2:	9c a3       	std	Y+36, r25	; 0x24
    10b4:	ad a3       	std	Y+37, r26	; 0x25
    10b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10b8:	6b a1       	ldd	r22, Y+35	; 0x23
    10ba:	7c a1       	ldd	r23, Y+36	; 0x24
    10bc:	8d a1       	ldd	r24, Y+37	; 0x25
    10be:	9e a1       	ldd	r25, Y+38	; 0x26
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e8       	ldi	r20, 0x80	; 128
    10c6:	5f e3       	ldi	r21, 0x3F	; 63
    10c8:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    10cc:	88 23       	and	r24, r24
    10ce:	2c f4       	brge	.+10     	; 0x10da <CLCD_voidSendData+0x184>
		__ticks = 1;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	9a a3       	std	Y+34, r25	; 0x22
    10d6:	89 a3       	std	Y+33, r24	; 0x21
    10d8:	3f c0       	rjmp	.+126    	; 0x1158 <CLCD_voidSendData+0x202>
	else if (__tmp > 65535)
    10da:	6b a1       	ldd	r22, Y+35	; 0x23
    10dc:	7c a1       	ldd	r23, Y+36	; 0x24
    10de:	8d a1       	ldd	r24, Y+37	; 0x25
    10e0:	9e a1       	ldd	r25, Y+38	; 0x26
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	3f ef       	ldi	r19, 0xFF	; 255
    10e6:	4f e7       	ldi	r20, 0x7F	; 127
    10e8:	57 e4       	ldi	r21, 0x47	; 71
    10ea:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    10ee:	18 16       	cp	r1, r24
    10f0:	4c f5       	brge	.+82     	; 0x1144 <CLCD_voidSendData+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f2:	6f a1       	ldd	r22, Y+39	; 0x27
    10f4:	78 a5       	ldd	r23, Y+40	; 0x28
    10f6:	89 a5       	ldd	r24, Y+41	; 0x29
    10f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e2       	ldi	r20, 0x20	; 32
    1100:	51 e4       	ldi	r21, 0x41	; 65
    1102:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	bc 01       	movw	r22, r24
    110c:	cd 01       	movw	r24, r26
    110e:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	9a a3       	std	Y+34, r25	; 0x22
    1118:	89 a3       	std	Y+33, r24	; 0x21
    111a:	0f c0       	rjmp	.+30     	; 0x113a <CLCD_voidSendData+0x1e4>
    111c:	88 ec       	ldi	r24, 0xC8	; 200
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	98 a3       	std	Y+32, r25	; 0x20
    1122:	8f 8f       	std	Y+31, r24	; 0x1f
    1124:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1126:	98 a1       	ldd	r25, Y+32	; 0x20
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	f1 f7       	brne	.-4      	; 0x1128 <CLCD_voidSendData+0x1d2>
    112c:	98 a3       	std	Y+32, r25	; 0x20
    112e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1130:	89 a1       	ldd	r24, Y+33	; 0x21
    1132:	9a a1       	ldd	r25, Y+34	; 0x22
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	9a a3       	std	Y+34, r25	; 0x22
    1138:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113a:	89 a1       	ldd	r24, Y+33	; 0x21
    113c:	9a a1       	ldd	r25, Y+34	; 0x22
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	69 f7       	brne	.-38     	; 0x111c <CLCD_voidSendData+0x1c6>
    1142:	14 c0       	rjmp	.+40     	; 0x116c <CLCD_voidSendData+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1144:	6b a1       	ldd	r22, Y+35	; 0x23
    1146:	7c a1       	ldd	r23, Y+36	; 0x24
    1148:	8d a1       	ldd	r24, Y+37	; 0x25
    114a:	9e a1       	ldd	r25, Y+38	; 0x26
    114c:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	9a a3       	std	Y+34, r25	; 0x22
    1156:	89 a3       	std	Y+33, r24	; 0x21
    1158:	89 a1       	ldd	r24, Y+33	; 0x21
    115a:	9a a1       	ldd	r25, Y+34	; 0x22
    115c:	9e 8f       	std	Y+30, r25	; 0x1e
    115e:	8d 8f       	std	Y+29, r24	; 0x1d
    1160:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1162:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	f1 f7       	brne	.-4      	; 0x1164 <CLCD_voidSendData+0x20e>
    1168:	9e 8f       	std	Y+30, r25	; 0x1e
    116a:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(2);

	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	69 ad       	ldd	r22, Y+57	; 0x39
    1170:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_u8SetPortValue>


	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);/*sent enable pulse*/
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	62 e0       	ldi	r22, 0x02	; 2
    1178:	41 e0       	ldi	r20, 0x01	; 1
    117a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <DIO_u8SetPinValue>
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	a0 e0       	ldi	r26, 0x00	; 0
    1184:	b0 e4       	ldi	r27, 0x40	; 64
    1186:	89 8f       	std	Y+25, r24	; 0x19
    1188:	9a 8f       	std	Y+26, r25	; 0x1a
    118a:	ab 8f       	std	Y+27, r26	; 0x1b
    118c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118e:	69 8d       	ldd	r22, Y+25	; 0x19
    1190:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1192:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1194:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	4a ef       	ldi	r20, 0xFA	; 250
    119c:	54 e4       	ldi	r21, 0x44	; 68
    119e:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	8d 8b       	std	Y+21, r24	; 0x15
    11a8:	9e 8b       	std	Y+22, r25	; 0x16
    11aa:	af 8b       	std	Y+23, r26	; 0x17
    11ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11ae:	6d 89       	ldd	r22, Y+21	; 0x15
    11b0:	7e 89       	ldd	r23, Y+22	; 0x16
    11b2:	8f 89       	ldd	r24, Y+23	; 0x17
    11b4:	98 8d       	ldd	r25, Y+24	; 0x18
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	40 e8       	ldi	r20, 0x80	; 128
    11bc:	5f e3       	ldi	r21, 0x3F	; 63
    11be:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    11c2:	88 23       	and	r24, r24
    11c4:	2c f4       	brge	.+10     	; 0x11d0 <CLCD_voidSendData+0x27a>
		__ticks = 1;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	9c 8b       	std	Y+20, r25	; 0x14
    11cc:	8b 8b       	std	Y+19, r24	; 0x13
    11ce:	3f c0       	rjmp	.+126    	; 0x124e <CLCD_voidSendData+0x2f8>
	else if (__tmp > 65535)
    11d0:	6d 89       	ldd	r22, Y+21	; 0x15
    11d2:	7e 89       	ldd	r23, Y+22	; 0x16
    11d4:	8f 89       	ldd	r24, Y+23	; 0x17
    11d6:	98 8d       	ldd	r25, Y+24	; 0x18
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	3f ef       	ldi	r19, 0xFF	; 255
    11dc:	4f e7       	ldi	r20, 0x7F	; 127
    11de:	57 e4       	ldi	r21, 0x47	; 71
    11e0:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    11e4:	18 16       	cp	r1, r24
    11e6:	4c f5       	brge	.+82     	; 0x123a <CLCD_voidSendData+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e8:	69 8d       	ldd	r22, Y+25	; 0x19
    11ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e2       	ldi	r20, 0x20	; 32
    11f6:	51 e4       	ldi	r21, 0x41	; 65
    11f8:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	bc 01       	movw	r22, r24
    1202:	cd 01       	movw	r24, r26
    1204:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	9c 8b       	std	Y+20, r25	; 0x14
    120e:	8b 8b       	std	Y+19, r24	; 0x13
    1210:	0f c0       	rjmp	.+30     	; 0x1230 <CLCD_voidSendData+0x2da>
    1212:	88 ec       	ldi	r24, 0xC8	; 200
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	9a 8b       	std	Y+18, r25	; 0x12
    1218:	89 8b       	std	Y+17, r24	; 0x11
    121a:	89 89       	ldd	r24, Y+17	; 0x11
    121c:	9a 89       	ldd	r25, Y+18	; 0x12
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <CLCD_voidSendData+0x2c8>
    1222:	9a 8b       	std	Y+18, r25	; 0x12
    1224:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1226:	8b 89       	ldd	r24, Y+19	; 0x13
    1228:	9c 89       	ldd	r25, Y+20	; 0x14
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	9c 8b       	std	Y+20, r25	; 0x14
    122e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1230:	8b 89       	ldd	r24, Y+19	; 0x13
    1232:	9c 89       	ldd	r25, Y+20	; 0x14
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	69 f7       	brne	.-38     	; 0x1212 <CLCD_voidSendData+0x2bc>
    1238:	14 c0       	rjmp	.+40     	; 0x1262 <CLCD_voidSendData+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    123a:	6d 89       	ldd	r22, Y+21	; 0x15
    123c:	7e 89       	ldd	r23, Y+22	; 0x16
    123e:	8f 89       	ldd	r24, Y+23	; 0x17
    1240:	98 8d       	ldd	r25, Y+24	; 0x18
    1242:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	9c 8b       	std	Y+20, r25	; 0x14
    124c:	8b 8b       	std	Y+19, r24	; 0x13
    124e:	8b 89       	ldd	r24, Y+19	; 0x13
    1250:	9c 89       	ldd	r25, Y+20	; 0x14
    1252:	98 8b       	std	Y+16, r25	; 0x10
    1254:	8f 87       	std	Y+15, r24	; 0x0f
    1256:	8f 85       	ldd	r24, Y+15	; 0x0f
    1258:	98 89       	ldd	r25, Y+16	; 0x10
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	f1 f7       	brne	.-4      	; 0x125a <CLCD_voidSendData+0x304>
    125e:	98 8b       	std	Y+16, r25	; 0x10
    1260:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);/*sent enable pulse*/
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	62 e0       	ldi	r22, 0x02	; 2
    1266:	40 e0       	ldi	r20, 0x00	; 0
    1268:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <DIO_u8SetPinValue>
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	a0 e0       	ldi	r26, 0x00	; 0
    1272:	b0 e4       	ldi	r27, 0x40	; 64
    1274:	8b 87       	std	Y+11, r24	; 0x0b
    1276:	9c 87       	std	Y+12, r25	; 0x0c
    1278:	ad 87       	std	Y+13, r26	; 0x0d
    127a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127c:	6b 85       	ldd	r22, Y+11	; 0x0b
    127e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1280:	8d 85       	ldd	r24, Y+13	; 0x0d
    1282:	9e 85       	ldd	r25, Y+14	; 0x0e
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	4a ef       	ldi	r20, 0xFA	; 250
    128a:	54 e4       	ldi	r21, 0x44	; 68
    128c:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	8f 83       	std	Y+7, r24	; 0x07
    1296:	98 87       	std	Y+8, r25	; 0x08
    1298:	a9 87       	std	Y+9, r26	; 0x09
    129a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    129c:	6f 81       	ldd	r22, Y+7	; 0x07
    129e:	78 85       	ldd	r23, Y+8	; 0x08
    12a0:	89 85       	ldd	r24, Y+9	; 0x09
    12a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e8       	ldi	r20, 0x80	; 128
    12aa:	5f e3       	ldi	r21, 0x3F	; 63
    12ac:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    12b0:	88 23       	and	r24, r24
    12b2:	2c f4       	brge	.+10     	; 0x12be <CLCD_voidSendData+0x368>
		__ticks = 1;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	9e 83       	std	Y+6, r25	; 0x06
    12ba:	8d 83       	std	Y+5, r24	; 0x05
    12bc:	3f c0       	rjmp	.+126    	; 0x133c <CLCD_voidSendData+0x3e6>
	else if (__tmp > 65535)
    12be:	6f 81       	ldd	r22, Y+7	; 0x07
    12c0:	78 85       	ldd	r23, Y+8	; 0x08
    12c2:	89 85       	ldd	r24, Y+9	; 0x09
    12c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	3f ef       	ldi	r19, 0xFF	; 255
    12ca:	4f e7       	ldi	r20, 0x7F	; 127
    12cc:	57 e4       	ldi	r21, 0x47	; 71
    12ce:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    12d2:	18 16       	cp	r1, r24
    12d4:	4c f5       	brge	.+82     	; 0x1328 <CLCD_voidSendData+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12da:	8d 85       	ldd	r24, Y+13	; 0x0d
    12dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e2       	ldi	r20, 0x20	; 32
    12e4:	51 e4       	ldi	r21, 0x41	; 65
    12e6:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	bc 01       	movw	r22, r24
    12f0:	cd 01       	movw	r24, r26
    12f2:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	9e 83       	std	Y+6, r25	; 0x06
    12fc:	8d 83       	std	Y+5, r24	; 0x05
    12fe:	0f c0       	rjmp	.+30     	; 0x131e <CLCD_voidSendData+0x3c8>
    1300:	88 ec       	ldi	r24, 0xC8	; 200
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	9c 83       	std	Y+4, r25	; 0x04
    1306:	8b 83       	std	Y+3, r24	; 0x03
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <CLCD_voidSendData+0x3b6>
    1310:	9c 83       	std	Y+4, r25	; 0x04
    1312:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1314:	8d 81       	ldd	r24, Y+5	; 0x05
    1316:	9e 81       	ldd	r25, Y+6	; 0x06
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	9e 83       	std	Y+6, r25	; 0x06
    131c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	69 f7       	brne	.-38     	; 0x1300 <CLCD_voidSendData+0x3aa>
    1326:	14 c0       	rjmp	.+40     	; 0x1350 <CLCD_voidSendData+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1328:	6f 81       	ldd	r22, Y+7	; 0x07
    132a:	78 85       	ldd	r23, Y+8	; 0x08
    132c:	89 85       	ldd	r24, Y+9	; 0x09
    132e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1330:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	9e 83       	std	Y+6, r25	; 0x06
    133a:	8d 83       	std	Y+5, r24	; 0x05
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	9e 81       	ldd	r25, Y+6	; 0x06
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <CLCD_voidSendData+0x3f2>
    134c:	9a 83       	std	Y+2, r25	; 0x02
    134e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    1350:	e9 96       	adiw	r28, 0x39	; 57
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <CLCD_voidInit>:



void CLCD_voidInit(void){
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	2e 97       	sbiw	r28, 0x0e	; 14
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	a8 e4       	ldi	r26, 0x48	; 72
    137c:	b2 e4       	ldi	r27, 0x42	; 66
    137e:	8b 87       	std	Y+11, r24	; 0x0b
    1380:	9c 87       	std	Y+12, r25	; 0x0c
    1382:	ad 87       	std	Y+13, r26	; 0x0d
    1384:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1386:	6b 85       	ldd	r22, Y+11	; 0x0b
    1388:	7c 85       	ldd	r23, Y+12	; 0x0c
    138a:	8d 85       	ldd	r24, Y+13	; 0x0d
    138c:	9e 85       	ldd	r25, Y+14	; 0x0e
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	4a ef       	ldi	r20, 0xFA	; 250
    1394:	54 e4       	ldi	r21, 0x44	; 68
    1396:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	8f 83       	std	Y+7, r24	; 0x07
    13a0:	98 87       	std	Y+8, r25	; 0x08
    13a2:	a9 87       	std	Y+9, r26	; 0x09
    13a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13a6:	6f 81       	ldd	r22, Y+7	; 0x07
    13a8:	78 85       	ldd	r23, Y+8	; 0x08
    13aa:	89 85       	ldd	r24, Y+9	; 0x09
    13ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e8       	ldi	r20, 0x80	; 128
    13b4:	5f e3       	ldi	r21, 0x3F	; 63
    13b6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    13ba:	88 23       	and	r24, r24
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <CLCD_voidInit+0x66>
		__ticks = 1;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9e 83       	std	Y+6, r25	; 0x06
    13c4:	8d 83       	std	Y+5, r24	; 0x05
    13c6:	3f c0       	rjmp	.+126    	; 0x1446 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    13c8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ca:	78 85       	ldd	r23, Y+8	; 0x08
    13cc:	89 85       	ldd	r24, Y+9	; 0x09
    13ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	3f ef       	ldi	r19, 0xFF	; 255
    13d4:	4f e7       	ldi	r20, 0x7F	; 127
    13d6:	57 e4       	ldi	r21, 0x47	; 71
    13d8:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    13dc:	18 16       	cp	r1, r24
    13de:	4c f5       	brge	.+82     	; 0x1432 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e2       	ldi	r20, 0x20	; 32
    13ee:	51 e4       	ldi	r21, 0x41	; 65
    13f0:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	bc 01       	movw	r22, r24
    13fa:	cd 01       	movw	r24, r26
    13fc:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	9e 83       	std	Y+6, r25	; 0x06
    1406:	8d 83       	std	Y+5, r24	; 0x05
    1408:	0f c0       	rjmp	.+30     	; 0x1428 <CLCD_voidInit+0xc6>
    140a:	88 ec       	ldi	r24, 0xC8	; 200
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9c 83       	std	Y+4, r25	; 0x04
    1410:	8b 83       	std	Y+3, r24	; 0x03
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	9c 81       	ldd	r25, Y+4	; 0x04
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	f1 f7       	brne	.-4      	; 0x1416 <CLCD_voidInit+0xb4>
    141a:	9c 83       	std	Y+4, r25	; 0x04
    141c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	9e 81       	ldd	r25, Y+6	; 0x06
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	9e 83       	std	Y+6, r25	; 0x06
    1426:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	9e 81       	ldd	r25, Y+6	; 0x06
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	69 f7       	brne	.-38     	; 0x140a <CLCD_voidInit+0xa8>
    1430:	14 c0       	rjmp	.+40     	; 0x145a <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1432:	6f 81       	ldd	r22, Y+7	; 0x07
    1434:	78 85       	ldd	r23, Y+8	; 0x08
    1436:	89 85       	ldd	r24, Y+9	; 0x09
    1438:	9a 85       	ldd	r25, Y+10	; 0x0a
    143a:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	9e 83       	std	Y+6, r25	; 0x06
    1444:	8d 83       	std	Y+5, r24	; 0x05
    1446:	8d 81       	ldd	r24, Y+5	; 0x05
    1448:	9e 81       	ldd	r25, Y+6	; 0x06
    144a:	9a 83       	std	Y+2, r25	; 0x02
    144c:	89 83       	std	Y+1, r24	; 0x01
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	9a 81       	ldd	r25, Y+2	; 0x02
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <CLCD_voidInit+0xf0>
    1456:	9a 83       	std	Y+2, r25	; 0x02
    1458:	89 83       	std	Y+1, r24	; 0x01
	//wait for more than 15 ms
	_delay_ms(50);

	//function set command : 2lines , 5*8
	CLCD_voidSendCommand(0x02);
    145a:	82 e0       	ldi	r24, 0x02	; 2
    145c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0x28);
    1460:	88 e2       	ldi	r24, 0x28	; 40
    1462:	0e 94 a5 05 	call	0xb4a	; 0xb4a <CLCD_voidSendCommand>

//display on off control : display enable , dis cursor , no blink
	CLCD_voidSendCommand(0x0c);
    1466:	8c e0       	ldi	r24, 0x0C	; 12
    1468:	0e 94 a5 05 	call	0xb4a	; 0xb4a <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0x01);
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <CLCD_voidSendCommand>

	CLCD_voidSendCommand(0x06);
    1472:	86 e0       	ldi	r24, 0x06	; 6
    1474:	0e 94 a5 05 	call	0xb4a	; 0xb4a <CLCD_voidSendCommand>

	// clear display
//CLCD_voidSendCommand(1);


}
    1478:	2e 96       	adiw	r28, 0x0e	; 14
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <CLCD_VoidSendString>:
void CLCD_VoidSendString(const char* Copy_pcString){
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	00 d0       	rcall	.+0      	; 0x1490 <CLCD_VoidSendString+0x6>
    1490:	0f 92       	push	r0
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	9b 83       	std	Y+3, r25	; 0x03
    1498:	8a 83       	std	Y+2, r24	; 0x02
	for(u8  Local_u8Counter = 0 ; Copy_pcString[Local_u8Counter]!='\0' ;Local_u8Counter++ ){
    149a:	19 82       	std	Y+1, r1	; 0x01
    149c:	0e c0       	rjmp	.+28     	; 0x14ba <CLCD_VoidSendString+0x30>
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	9b 81       	ldd	r25, Y+3	; 0x03
    14a8:	fc 01       	movw	r30, r24
    14aa:	e2 0f       	add	r30, r18
    14ac:	f3 1f       	adc	r31, r19
    14ae:	80 81       	ld	r24, Z
    14b0:	0e 94 ab 07 	call	0xf56	; 0xf56 <CLCD_voidSendData>
//CLCD_voidSendCommand(1);


}
void CLCD_VoidSendString(const char* Copy_pcString){
	for(u8  Local_u8Counter = 0 ; Copy_pcString[Local_u8Counter]!='\0' ;Local_u8Counter++ ){
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	8f 5f       	subi	r24, 0xFF	; 255
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	9b 81       	ldd	r25, Y+3	; 0x03
    14c4:	fc 01       	movw	r30, r24
    14c6:	e2 0f       	add	r30, r18
    14c8:	f3 1f       	adc	r31, r19
    14ca:	80 81       	ld	r24, Z
    14cc:	88 23       	and	r24, r24
    14ce:	39 f7       	brne	.-50     	; 0x149e <CLCD_VoidSendString+0x14>


	}


}
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <CLCD_VoidGoToXY>:

void CLCD_VoidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos){
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <CLCD_VoidGoToXY+0x6>
    14e2:	0f 92       	push	r0
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	8a 83       	std	Y+2, r24	; 0x02
    14ea:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address ;
	if(Copy_u8XPos==0){
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	88 23       	and	r24, r24
    14f0:	19 f4       	brne	.+6      	; 0x14f8 <CLCD_VoidGoToXY+0x1c>
		Local_u8Address = Copy_u8YPos ;
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	06 c0       	rjmp	.+12     	; 0x1504 <CLCD_VoidGoToXY+0x28>

	}
	else if(Copy_u8XPos==1){
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	19 f4       	brne	.+6      	; 0x1504 <CLCD_VoidGoToXY+0x28>
		Local_u8Address = Copy_u8YPos + 0x40  ;
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	80 5c       	subi	r24, 0xC0	; 192
    1502:	89 83       	std	Y+1, r24	; 0x01

	}
	CLCD_voidSendCommand(Local_u8Address + 128);
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	80 58       	subi	r24, 0x80	; 128
    1508:	0e 94 a5 05 	call	0xb4a	; 0xb4a <CLCD_voidSendCommand>


}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <CLCD_VoidWriteSpecialCha>:


void CLCD_VoidWriteSpecialCha(u8* copy_pu8Pattern , u8 Copy_u8PatternNumber ,u8 Copy_u8XPos ,u8 Copy_u8YPos){
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	27 97       	sbiw	r28, 0x07	; 7
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	9c 83       	std	Y+4, r25	; 0x04
    152e:	8b 83       	std	Y+3, r24	; 0x03
    1530:	6d 83       	std	Y+5, r22	; 0x05
    1532:	4e 83       	std	Y+6, r20	; 0x06
    1534:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0 , Local_u8Iterator   ;
    1536:	1a 82       	std	Y+2, r1	; 0x02
	//add = block num * 8 "each block 8 bytes "//
	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8 ;
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	8a 83       	std	Y+2, r24	; 0x02
	//send CG ram address command
	CLCD_voidSendCommand(Local_u8CGRAMAddress + 64);
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	80 5c       	subi	r24, 0xC0	; 192
    1550:	0e 94 a5 05 	call	0xb4a	; 0xb4a <CLCD_voidSendCommand>
	//write the pattern into cg ram //
	for(Local_u8Iterator = 0 ; Local_u8Iterator <8 ; Local_u8Iterator++ ){
    1554:	19 82       	std	Y+1, r1	; 0x01
    1556:	0e c0       	rjmp	.+28     	; 0x1574 <CLCD_VoidWriteSpecialCha+0x5c>

		CLCD_voidSendData(copy_pu8Pattern[Local_u8Iterator]);
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	fc 01       	movw	r30, r24
    1564:	e2 0f       	add	r30, r18
    1566:	f3 1f       	adc	r31, r19
    1568:	80 81       	ld	r24, Z
    156a:	0e 94 ab 07 	call	0xf56	; 0xf56 <CLCD_voidSendData>
	//add = block num * 8 "each block 8 bytes "//
	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8 ;
	//send CG ram address command
	CLCD_voidSendCommand(Local_u8CGRAMAddress + 64);
	//write the pattern into cg ram //
	for(Local_u8Iterator = 0 ; Local_u8Iterator <8 ; Local_u8Iterator++ ){
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	8f 5f       	subi	r24, 0xFF	; 255
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	88 30       	cpi	r24, 0x08	; 8
    1578:	78 f3       	brcs	.-34     	; 0x1558 <CLCD_VoidWriteSpecialCha+0x40>
		CLCD_voidSendData(copy_pu8Pattern[Local_u8Iterator]);


	}
	//go back to DDRam
	CLCD_VoidGoToXY(Copy_u8XPos , Copy_u8YPos);
    157a:	8e 81       	ldd	r24, Y+6	; 0x06
    157c:	6f 81       	ldd	r22, Y+7	; 0x07
    157e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <CLCD_VoidGoToXY>

	//Display the pattern written in the cg ram //
	CLCD_voidSendData(Copy_u8PatternNumber);
    1582:	8d 81       	ldd	r24, Y+5	; 0x05
    1584:	0e 94 ab 07 	call	0xf56	; 0xf56 <CLCD_voidSendData>



}
    1588:	27 96       	adiw	r28, 0x07	; 7
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <DIO_u8SetPinDirection>:
#include"DIO_interface.h"
#include"DIO_register.h"
#include"DIO_config.h"
#include"DIO_private.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port ,u8 Copy_u8Pin ,u8 Copy_u8Direction){
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	28 97       	sbiw	r28, 0x08	; 8
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	cd bf       	out	0x3d, r28	; 61
    15ae:	8a 83       	std	Y+2, r24	; 0x02
    15b0:	6b 83       	std	Y+3, r22	; 0x03
    15b2:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0 ;
    15b4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= DIO_u8PIN7 ){
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	88 30       	cpi	r24, 0x08	; 8
    15ba:	08 f0       	brcs	.+2      	; 0x15be <DIO_u8SetPinDirection+0x24>
    15bc:	b3 c0       	rjmp	.+358    	; 0x1724 <DIO_u8SetPinDirection+0x18a>
		if(Copy_u8Direction == DIO_u8PIN_INPUT){
    15be:	8c 81       	ldd	r24, Y+4	; 0x04
    15c0:	88 23       	and	r24, r24
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <DIO_u8SetPinDirection+0x2c>
    15c4:	56 c0       	rjmp	.+172    	; 0x1672 <DIO_u8SetPinDirection+0xd8>
			switch(Copy_u8Port){
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	38 87       	std	Y+8, r19	; 0x08
    15ce:	2f 83       	std	Y+7, r18	; 0x07
    15d0:	8f 81       	ldd	r24, Y+7	; 0x07
    15d2:	98 85       	ldd	r25, Y+8	; 0x08
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	91 05       	cpc	r25, r1
    15d8:	f9 f0       	breq	.+62     	; 0x1618 <DIO_u8SetPinDirection+0x7e>
    15da:	2f 81       	ldd	r18, Y+7	; 0x07
    15dc:	38 85       	ldd	r19, Y+8	; 0x08
    15de:	22 30       	cpi	r18, 0x02	; 2
    15e0:	31 05       	cpc	r19, r1
    15e2:	79 f1       	breq	.+94     	; 0x1642 <DIO_u8SetPinDirection+0xa8>
    15e4:	8f 81       	ldd	r24, Y+7	; 0x07
    15e6:	98 85       	ldd	r25, Y+8	; 0x08
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	09 f0       	breq	.+2      	; 0x15ee <DIO_u8SetPinDirection+0x54>
    15ec:	3f c0       	rjmp	.+126    	; 0x166c <DIO_u8SetPinDirection+0xd2>

			case DIO_u8PORTB : CLR_BIT(DDRB,Copy_u8Pin); break;
    15ee:	a4 e2       	ldi	r26, 0x24	; 36
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e4 e2       	ldi	r30, 0x24	; 36
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	48 2f       	mov	r20, r24
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 2e       	mov	r0, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <DIO_u8SetPinDirection+0x72>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <DIO_u8SetPinDirection+0x6e>
    1610:	80 95       	com	r24
    1612:	84 23       	and	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	88 c0       	rjmp	.+272    	; 0x1728 <DIO_u8SetPinDirection+0x18e>
			case DIO_u8PORTC : CLR_BIT(DDRC,Copy_u8Pin); break;
    1618:	a7 e2       	ldi	r26, 0x27	; 39
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e7 e2       	ldi	r30, 0x27	; 39
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <DIO_u8SetPinDirection+0x9c>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <DIO_u8SetPinDirection+0x98>
    163a:	80 95       	com	r24
    163c:	84 23       	and	r24, r20
    163e:	8c 93       	st	X, r24
    1640:	73 c0       	rjmp	.+230    	; 0x1728 <DIO_u8SetPinDirection+0x18e>
			case DIO_u8PORTD : CLR_BIT(DDRD,Copy_u8Pin); break;
    1642:	aa e2       	ldi	r26, 0x2A	; 42
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	ea e2       	ldi	r30, 0x2A	; 42
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	48 2f       	mov	r20, r24
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 2e       	mov	r0, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <DIO_u8SetPinDirection+0xc6>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <DIO_u8SetPinDirection+0xc2>
    1664:	80 95       	com	r24
    1666:	84 23       	and	r24, r20
    1668:	8c 93       	st	X, r24
    166a:	5e c0       	rjmp	.+188    	; 0x1728 <DIO_u8SetPinDirection+0x18e>
			default 		 : Local_u8ErrorState = 1  ; break;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	5b c0       	rjmp	.+182    	; 0x1728 <DIO_u8SetPinDirection+0x18e>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT){
    1672:	8c 81       	ldd	r24, Y+4	; 0x04
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	09 f0       	breq	.+2      	; 0x167a <DIO_u8SetPinDirection+0xe0>
    1678:	52 c0       	rjmp	.+164    	; 0x171e <DIO_u8SetPinDirection+0x184>
			switch(Copy_u8Port){
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	3e 83       	std	Y+6, r19	; 0x06
    1682:	2d 83       	std	Y+5, r18	; 0x05
    1684:	8d 81       	ldd	r24, Y+5	; 0x05
    1686:	9e 81       	ldd	r25, Y+6	; 0x06
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	91 05       	cpc	r25, r1
    168c:	e9 f0       	breq	.+58     	; 0x16c8 <DIO_u8SetPinDirection+0x12e>
    168e:	2d 81       	ldd	r18, Y+5	; 0x05
    1690:	3e 81       	ldd	r19, Y+6	; 0x06
    1692:	22 30       	cpi	r18, 0x02	; 2
    1694:	31 05       	cpc	r19, r1
    1696:	61 f1       	breq	.+88     	; 0x16f0 <DIO_u8SetPinDirection+0x156>
    1698:	8d 81       	ldd	r24, Y+5	; 0x05
    169a:	9e 81       	ldd	r25, Y+6	; 0x06
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	e1 f5       	brne	.+120    	; 0x1718 <DIO_u8SetPinDirection+0x17e>

			case DIO_u8PORTB : SET_BIT(DDRB,Copy_u8Pin); break;
    16a0:	a4 e2       	ldi	r26, 0x24	; 36
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e4 e2       	ldi	r30, 0x24	; 36
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	02 2e       	mov	r0, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <DIO_u8SetPinDirection+0x124>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	0a 94       	dec	r0
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <DIO_u8SetPinDirection+0x120>
    16c2:	84 2b       	or	r24, r20
    16c4:	8c 93       	st	X, r24
    16c6:	30 c0       	rjmp	.+96     	; 0x1728 <DIO_u8SetPinDirection+0x18e>
			case DIO_u8PORTC : SET_BIT(DDRC,Copy_u8Pin); break;
    16c8:	a7 e2       	ldi	r26, 0x27	; 39
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e7 e2       	ldi	r30, 0x27	; 39
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <DIO_u8SetPinDirection+0x14c>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <DIO_u8SetPinDirection+0x148>
    16ea:	84 2b       	or	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	1c c0       	rjmp	.+56     	; 0x1728 <DIO_u8SetPinDirection+0x18e>
			case DIO_u8PORTD : SET_BIT(DDRD,Copy_u8Pin); break;
    16f0:	aa e2       	ldi	r26, 0x2A	; 42
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	ea e2       	ldi	r30, 0x2A	; 42
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	48 2f       	mov	r20, r24
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	02 2e       	mov	r0, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <DIO_u8SetPinDirection+0x174>
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	0a 94       	dec	r0
    1710:	e2 f7       	brpl	.-8      	; 0x170a <DIO_u8SetPinDirection+0x170>
    1712:	84 2b       	or	r24, r20
    1714:	8c 93       	st	X, r24
    1716:	08 c0       	rjmp	.+16     	; 0x1728 <DIO_u8SetPinDirection+0x18e>
			default 		 : Local_u8ErrorState = 1  ; break;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	89 83       	std	Y+1, r24	; 0x01
    171c:	05 c0       	rjmp	.+10     	; 0x1728 <DIO_u8SetPinDirection+0x18e>
			}

		}
		else
		{
			Local_u8ErrorState = 1 ;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_u8SetPinDirection+0x18e>
		}
	}
	else {
		Local_u8ErrorState = 1 ;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1728:	89 81       	ldd	r24, Y+1	; 0x01
}
    172a:	28 96       	adiw	r28, 0x08	; 8
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	08 95       	ret

0000173c <DIO_u8SetPortDirection>:



u8 DIO_u8SetPortDirection(u8 Copy_u8Port ,u8 Copy_u8Direction){
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	00 d0       	rcall	.+0      	; 0x1742 <DIO_u8SetPortDirection+0x6>
    1742:	00 d0       	rcall	.+0      	; 0x1744 <DIO_u8SetPortDirection+0x8>
    1744:	0f 92       	push	r0
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	8a 83       	std	Y+2, r24	; 0x02
    174c:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ErrorState=0 ;
    174e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port){
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	3d 83       	std	Y+5, r19	; 0x05
    1758:	2c 83       	std	Y+4, r18	; 0x04
    175a:	8c 81       	ldd	r24, Y+4	; 0x04
    175c:	9d 81       	ldd	r25, Y+5	; 0x05
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	91 05       	cpc	r25, r1
    1762:	71 f0       	breq	.+28     	; 0x1780 <DIO_u8SetPortDirection+0x44>
    1764:	2c 81       	ldd	r18, Y+4	; 0x04
    1766:	3d 81       	ldd	r19, Y+5	; 0x05
    1768:	22 30       	cpi	r18, 0x02	; 2
    176a:	31 05       	cpc	r19, r1
    176c:	71 f0       	breq	.+28     	; 0x178a <DIO_u8SetPortDirection+0x4e>
    176e:	8c 81       	ldd	r24, Y+4	; 0x04
    1770:	9d 81       	ldd	r25, Y+5	; 0x05
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	79 f4       	brne	.+30     	; 0x1794 <DIO_u8SetPortDirection+0x58>
	case DIO_u8PORTB : DDRB=Copy_u8Direction ; break ;
    1776:	e4 e2       	ldi	r30, 0x24	; 36
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	80 83       	st	Z, r24
    177e:	0c c0       	rjmp	.+24     	; 0x1798 <DIO_u8SetPortDirection+0x5c>
	case DIO_u8PORTC : DDRC=Copy_u8Direction ; break ;
    1780:	e7 e2       	ldi	r30, 0x27	; 39
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	80 83       	st	Z, r24
    1788:	07 c0       	rjmp	.+14     	; 0x1798 <DIO_u8SetPortDirection+0x5c>
	case DIO_u8PORTD : DDRD=Copy_u8Direction ; break ;
    178a:	ea e2       	ldi	r30, 0x2A	; 42
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	80 83       	st	Z, r24
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <DIO_u8SetPortDirection+0x5c>
	default 		 : Local_u8ErrorState = 1 ; break;
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8ErrorState ;
    1798:	89 81       	ldd	r24, Y+1	; 0x01

}
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <DIO_u8SetPinValue>:




u8 DIO_u8SetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin ,u8 Copy_u8Value){
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	28 97       	sbiw	r28, 0x08	; 8
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	8a 83       	std	Y+2, r24	; 0x02
    17c0:	6b 83       	std	Y+3, r22	; 0x03
    17c2:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0 ;
    17c4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= DIO_u8PIN7){
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	88 30       	cpi	r24, 0x08	; 8
    17ca:	08 f0       	brcs	.+2      	; 0x17ce <DIO_u8SetPinValue+0x24>
    17cc:	b3 c0       	rjmp	.+358    	; 0x1934 <DIO_u8SetPinValue+0x18a>

		if(Copy_u8Value == DIO_u8PIN_LOW ){
    17ce:	8c 81       	ldd	r24, Y+4	; 0x04
    17d0:	88 23       	and	r24, r24
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <DIO_u8SetPinValue+0x2c>
    17d4:	56 c0       	rjmp	.+172    	; 0x1882 <DIO_u8SetPinValue+0xd8>

			switch(Copy_u8Port){
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	38 87       	std	Y+8, r19	; 0x08
    17de:	2f 83       	std	Y+7, r18	; 0x07
    17e0:	8f 81       	ldd	r24, Y+7	; 0x07
    17e2:	98 85       	ldd	r25, Y+8	; 0x08
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	91 05       	cpc	r25, r1
    17e8:	f9 f0       	breq	.+62     	; 0x1828 <DIO_u8SetPinValue+0x7e>
    17ea:	2f 81       	ldd	r18, Y+7	; 0x07
    17ec:	38 85       	ldd	r19, Y+8	; 0x08
    17ee:	22 30       	cpi	r18, 0x02	; 2
    17f0:	31 05       	cpc	r19, r1
    17f2:	79 f1       	breq	.+94     	; 0x1852 <DIO_u8SetPinValue+0xa8>
    17f4:	8f 81       	ldd	r24, Y+7	; 0x07
    17f6:	98 85       	ldd	r25, Y+8	; 0x08
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	09 f0       	breq	.+2      	; 0x17fe <DIO_u8SetPinValue+0x54>
    17fc:	3f c0       	rjmp	.+126    	; 0x187c <DIO_u8SetPinValue+0xd2>

			case  DIO_u8PORTB : CLR_BIT(PORTB , Copy_u8Pin)  ; break ;
    17fe:	a5 e2       	ldi	r26, 0x25	; 37
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e5 e2       	ldi	r30, 0x25	; 37
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	48 2f       	mov	r20, r24
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	02 2e       	mov	r0, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <DIO_u8SetPinValue+0x72>
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	0a 94       	dec	r0
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <DIO_u8SetPinValue+0x6e>
    1820:	80 95       	com	r24
    1822:	84 23       	and	r24, r20
    1824:	8c 93       	st	X, r24
    1826:	88 c0       	rjmp	.+272    	; 0x1938 <DIO_u8SetPinValue+0x18e>
			case  DIO_u8PORTC : CLR_BIT(PORTC , Copy_u8Pin)  ; break ;
    1828:	a8 e2       	ldi	r26, 0x28	; 40
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e8 e2       	ldi	r30, 0x28	; 40
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	48 2f       	mov	r20, r24
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 2e       	mov	r0, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <DIO_u8SetPinValue+0x9c>
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	0a 94       	dec	r0
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <DIO_u8SetPinValue+0x98>
    184a:	80 95       	com	r24
    184c:	84 23       	and	r24, r20
    184e:	8c 93       	st	X, r24
    1850:	73 c0       	rjmp	.+230    	; 0x1938 <DIO_u8SetPinValue+0x18e>
			case  DIO_u8PORTD : CLR_BIT(PORTD , Copy_u8Pin)  ; break ;
    1852:	ab e2       	ldi	r26, 0x2B	; 43
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	eb e2       	ldi	r30, 0x2B	; 43
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	48 2f       	mov	r20, r24
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 2e       	mov	r0, r18
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <DIO_u8SetPinValue+0xc6>
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	0a 94       	dec	r0
    1872:	e2 f7       	brpl	.-8      	; 0x186c <DIO_u8SetPinValue+0xc2>
    1874:	80 95       	com	r24
    1876:	84 23       	and	r24, r20
    1878:	8c 93       	st	X, r24
    187a:	5e c0       	rjmp	.+188    	; 0x1938 <DIO_u8SetPinValue+0x18e>
			default :  Local_u8ErrorState = 1                ; break ;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	89 83       	std	Y+1, r24	; 0x01
    1880:	5b c0       	rjmp	.+182    	; 0x1938 <DIO_u8SetPinValue+0x18e>

			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH) {
    1882:	8c 81       	ldd	r24, Y+4	; 0x04
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	09 f0       	breq	.+2      	; 0x188a <DIO_u8SetPinValue+0xe0>
    1888:	52 c0       	rjmp	.+164    	; 0x192e <DIO_u8SetPinValue+0x184>
			switch(Copy_u8Port){
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	3e 83       	std	Y+6, r19	; 0x06
    1892:	2d 83       	std	Y+5, r18	; 0x05
    1894:	8d 81       	ldd	r24, Y+5	; 0x05
    1896:	9e 81       	ldd	r25, Y+6	; 0x06
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	91 05       	cpc	r25, r1
    189c:	e9 f0       	breq	.+58     	; 0x18d8 <DIO_u8SetPinValue+0x12e>
    189e:	2d 81       	ldd	r18, Y+5	; 0x05
    18a0:	3e 81       	ldd	r19, Y+6	; 0x06
    18a2:	22 30       	cpi	r18, 0x02	; 2
    18a4:	31 05       	cpc	r19, r1
    18a6:	61 f1       	breq	.+88     	; 0x1900 <DIO_u8SetPinValue+0x156>
    18a8:	8d 81       	ldd	r24, Y+5	; 0x05
    18aa:	9e 81       	ldd	r25, Y+6	; 0x06
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	e1 f5       	brne	.+120    	; 0x1928 <DIO_u8SetPinValue+0x17e>
			case  DIO_u8PORTB : SET_BIT(PORTB , Copy_u8Pin)  ; break ;
    18b0:	a5 e2       	ldi	r26, 0x25	; 37
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e5 e2       	ldi	r30, 0x25	; 37
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	48 2f       	mov	r20, r24
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	02 2e       	mov	r0, r18
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <DIO_u8SetPinValue+0x124>
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	0a 94       	dec	r0
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <DIO_u8SetPinValue+0x120>
    18d2:	84 2b       	or	r24, r20
    18d4:	8c 93       	st	X, r24
    18d6:	30 c0       	rjmp	.+96     	; 0x1938 <DIO_u8SetPinValue+0x18e>
			case  DIO_u8PORTC : SET_BIT(PORTC , Copy_u8Pin)  ; break ;
    18d8:	a8 e2       	ldi	r26, 0x28	; 40
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e8 e2       	ldi	r30, 0x28	; 40
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <DIO_u8SetPinValue+0x14c>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <DIO_u8SetPinValue+0x148>
    18fa:	84 2b       	or	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	1c c0       	rjmp	.+56     	; 0x1938 <DIO_u8SetPinValue+0x18e>
			case  DIO_u8PORTD : SET_BIT(PORTD , Copy_u8Pin)  ; break ;
    1900:	ab e2       	ldi	r26, 0x2B	; 43
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	eb e2       	ldi	r30, 0x2B	; 43
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <DIO_u8SetPinValue+0x174>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <DIO_u8SetPinValue+0x170>
    1922:	84 2b       	or	r24, r20
    1924:	8c 93       	st	X, r24
    1926:	08 c0       	rjmp	.+16     	; 0x1938 <DIO_u8SetPinValue+0x18e>
			default :  Local_u8ErrorState = 1                ; break ;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	05 c0       	rjmp	.+10     	; 0x1938 <DIO_u8SetPinValue+0x18e>
			}
		}
		else {
			Local_u8ErrorState = 1  ;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	89 83       	std	Y+1, r24	; 0x01
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <DIO_u8SetPinValue+0x18e>
		}

	}
	else {

		Local_u8ErrorState = 1 ;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	89 83       	std	Y+1, r24	; 0x01





	return Local_u8ErrorState ;
    1938:	89 81       	ldd	r24, Y+1	; 0x01
}
    193a:	28 96       	adiw	r28, 0x08	; 8
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <DIO_u8SetPortValue>:



u8 DIO_u8SetPortValue(u8 Copy_u8Port  ,u8 Copy_u8Value){
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	00 d0       	rcall	.+0      	; 0x1952 <DIO_u8SetPortValue+0x6>
    1952:	00 d0       	rcall	.+0      	; 0x1954 <DIO_u8SetPortValue+0x8>
    1954:	0f 92       	push	r0
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	8a 83       	std	Y+2, r24	; 0x02
    195c:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ErrorState=0 ;
    195e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port){
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	3d 83       	std	Y+5, r19	; 0x05
    1968:	2c 83       	std	Y+4, r18	; 0x04
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	9d 81       	ldd	r25, Y+5	; 0x05
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	91 05       	cpc	r25, r1
    1972:	71 f0       	breq	.+28     	; 0x1990 <DIO_u8SetPortValue+0x44>
    1974:	2c 81       	ldd	r18, Y+4	; 0x04
    1976:	3d 81       	ldd	r19, Y+5	; 0x05
    1978:	22 30       	cpi	r18, 0x02	; 2
    197a:	31 05       	cpc	r19, r1
    197c:	71 f0       	breq	.+28     	; 0x199a <DIO_u8SetPortValue+0x4e>
    197e:	8c 81       	ldd	r24, Y+4	; 0x04
    1980:	9d 81       	ldd	r25, Y+5	; 0x05
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	79 f4       	brne	.+30     	; 0x19a4 <DIO_u8SetPortValue+0x58>
	case DIO_u8PORTB : PORTB = Copy_u8Value ; break ;
    1986:	e5 e2       	ldi	r30, 0x25	; 37
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	80 83       	st	Z, r24
    198e:	0c c0       	rjmp	.+24     	; 0x19a8 <DIO_u8SetPortValue+0x5c>
	case DIO_u8PORTC : PORTC = Copy_u8Value ; break ;
    1990:	e8 e2       	ldi	r30, 0x28	; 40
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	80 83       	st	Z, r24
    1998:	07 c0       	rjmp	.+14     	; 0x19a8 <DIO_u8SetPortValue+0x5c>
	case DIO_u8PORTD : PORTD = Copy_u8Value ; break ;
    199a:	eb e2       	ldi	r30, 0x2B	; 43
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	80 83       	st	Z, r24
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <DIO_u8SetPortValue+0x5c>
	default :  Local_u8ErrorState = 1       ; break ;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	89 83       	std	Y+1, r24	; 0x01


	}


	return Local_u8ErrorState ;
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <DIO_u8GetPinValue>:

/*******************************************************************************************/

u8 DIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8* Copy_pu8Value){
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	27 97       	sbiw	r28, 0x07	; 7
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	8a 83       	std	Y+2, r24	; 0x02
    19d0:	6b 83       	std	Y+3, r22	; 0x03
    19d2:	5d 83       	std	Y+5, r21	; 0x05
    19d4:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0 ;
    19d6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Value != NULL && Copy_u8Pin <= DIO_u8PIN7){
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	9d 81       	ldd	r25, Y+5	; 0x05
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	09 f4       	brne	.+2      	; 0x19e2 <DIO_u8GetPinValue+0x28>
    19e0:	58 c0       	rjmp	.+176    	; 0x1a92 <DIO_u8GetPinValue+0xd8>
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	88 30       	cpi	r24, 0x08	; 8
    19e6:	08 f0       	brcs	.+2      	; 0x19ea <DIO_u8GetPinValue+0x30>
    19e8:	54 c0       	rjmp	.+168    	; 0x1a92 <DIO_u8GetPinValue+0xd8>
		switch(Copy_u8Port){
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	3f 83       	std	Y+7, r19	; 0x07
    19f2:	2e 83       	std	Y+6, r18	; 0x06
    19f4:	4e 81       	ldd	r20, Y+6	; 0x06
    19f6:	5f 81       	ldd	r21, Y+7	; 0x07
    19f8:	41 30       	cpi	r20, 0x01	; 1
    19fa:	51 05       	cpc	r21, r1
    19fc:	f9 f0       	breq	.+62     	; 0x1a3c <DIO_u8GetPinValue+0x82>
    19fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1a00:	9f 81       	ldd	r25, Y+7	; 0x07
    1a02:	82 30       	cpi	r24, 0x02	; 2
    1a04:	91 05       	cpc	r25, r1
    1a06:	71 f1       	breq	.+92     	; 0x1a64 <DIO_u8GetPinValue+0xaa>
    1a08:	2e 81       	ldd	r18, Y+6	; 0x06
    1a0a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a0c:	21 15       	cp	r18, r1
    1a0e:	31 05       	cpc	r19, r1
    1a10:	09 f0       	breq	.+2      	; 0x1a14 <DIO_u8GetPinValue+0x5a>
    1a12:	3c c0       	rjmp	.+120    	; 0x1a8c <DIO_u8GetPinValue+0xd2>
		case DIO_u8PORTB  : *Copy_pu8Value = GET_BIT(PINB , Copy_u8Pin ) ; break ;
    1a14:	e3 e2       	ldi	r30, 0x23	; 35
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	88 2f       	mov	r24, r24
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	a9 01       	movw	r20, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <DIO_u8GetPinValue+0x72>
    1a28:	55 95       	asr	r21
    1a2a:	47 95       	ror	r20
    1a2c:	8a 95       	dec	r24
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <DIO_u8GetPinValue+0x6e>
    1a30:	ca 01       	movw	r24, r20
    1a32:	81 70       	andi	r24, 0x01	; 1
    1a34:	ec 81       	ldd	r30, Y+4	; 0x04
    1a36:	fd 81       	ldd	r31, Y+5	; 0x05
    1a38:	80 83       	st	Z, r24
    1a3a:	2d c0       	rjmp	.+90     	; 0x1a96 <DIO_u8GetPinValue+0xdc>
		case DIO_u8PORTC  : *Copy_pu8Value = GET_BIT(PINC , Copy_u8Pin ) ; break ;
    1a3c:	e6 e2       	ldi	r30, 0x26	; 38
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	28 2f       	mov	r18, r24
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	88 2f       	mov	r24, r24
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	a9 01       	movw	r20, r18
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <DIO_u8GetPinValue+0x9a>
    1a50:	55 95       	asr	r21
    1a52:	47 95       	ror	r20
    1a54:	8a 95       	dec	r24
    1a56:	e2 f7       	brpl	.-8      	; 0x1a50 <DIO_u8GetPinValue+0x96>
    1a58:	ca 01       	movw	r24, r20
    1a5a:	81 70       	andi	r24, 0x01	; 1
    1a5c:	ec 81       	ldd	r30, Y+4	; 0x04
    1a5e:	fd 81       	ldd	r31, Y+5	; 0x05
    1a60:	80 83       	st	Z, r24
    1a62:	19 c0       	rjmp	.+50     	; 0x1a96 <DIO_u8GetPinValue+0xdc>
		case DIO_u8PORTD  : *Copy_pu8Value = GET_BIT(PIND , Copy_u8Pin ) ; break ;
    1a64:	e9 e2       	ldi	r30, 0x29	; 41
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	a9 01       	movw	r20, r18
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <DIO_u8GetPinValue+0xc2>
    1a78:	55 95       	asr	r21
    1a7a:	47 95       	ror	r20
    1a7c:	8a 95       	dec	r24
    1a7e:	e2 f7       	brpl	.-8      	; 0x1a78 <DIO_u8GetPinValue+0xbe>
    1a80:	ca 01       	movw	r24, r20
    1a82:	81 70       	andi	r24, 0x01	; 1
    1a84:	ec 81       	ldd	r30, Y+4	; 0x04
    1a86:	fd 81       	ldd	r31, Y+5	; 0x05
    1a88:	80 83       	st	Z, r24
    1a8a:	05 c0       	rjmp	.+10     	; 0x1a96 <DIO_u8GetPinValue+0xdc>
		default :Local_u8ErrorState= 1  ;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <DIO_u8GetPinValue+0xdc>
		}

	}
	else {
		Local_u8ErrorState = 1  ;
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a98:	27 96       	adiw	r28, 0x07	; 7
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <PORT_VoidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"


void PORT_VoidInit(void){
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62

	DDRB = PORTB_DIR ;
    1ab2:	e4 e2       	ldi	r30, 0x24	; 36
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	87 e0       	ldi	r24, 0x07	; 7
    1ab8:	80 83       	st	Z, r24
	DDRC = PORTC_DIR ;
    1aba:	e7 e2       	ldi	r30, 0x27	; 39
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	8f e0       	ldi	r24, 0x0F	; 15
    1ac0:	80 83       	st	Z, r24
	DDRD = PORTD_DIR ;
    1ac2:	ea e2       	ldi	r30, 0x2A	; 42
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	10 82       	st	Z, r1


	PORTB = PORTB_INITIAL_VALUE ;
    1ac8:	e5 e2       	ldi	r30, 0x25	; 37
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE ;
    1ace:	e8 e2       	ldi	r30, 0x28	; 40
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE ;
    1ad4:	eb e2       	ldi	r30, 0x2B	; 43
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	10 82       	st	Z, r1

}
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <main>:
#include "STD_Types.h"
#include "CLCD_interface.h"
#include "DIO_interface.h"
#include "PORT_interface.h"

void main(void){
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	cc 56       	subi	r28, 0x6C	; 108
    1aea:	d0 40       	sbci	r29, 0x00	; 0
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
	u8  arrw[8]= {0b00000000,0b00001110,0b00001010,0b00001110,0b00000010,0b00000100,0b00001000,0b00010000};
    1af6:	ce 01       	movw	r24, r28
    1af8:	c9 96       	adiw	r24, 0x39	; 57
    1afa:	6b 96       	adiw	r28, 0x1b	; 27
    1afc:	9f af       	std	Y+63, r25	; 0x3f
    1afe:	8e af       	std	Y+62, r24	; 0x3e
    1b00:	6b 97       	sbiw	r28, 0x1b	; 27
    1b02:	e0 e2       	ldi	r30, 0x20	; 32
    1b04:	f1 e0       	ldi	r31, 0x01	; 1
    1b06:	6d 96       	adiw	r28, 0x1d	; 29
    1b08:	ff af       	std	Y+63, r31	; 0x3f
    1b0a:	ee af       	std	Y+62, r30	; 0x3e
    1b0c:	6d 97       	sbiw	r28, 0x1d	; 29
    1b0e:	f8 e0       	ldi	r31, 0x08	; 8
    1b10:	6e 96       	adiw	r28, 0x1e	; 30
    1b12:	ff af       	std	Y+63, r31	; 0x3f
    1b14:	6e 97       	sbiw	r28, 0x1e	; 30
    1b16:	6d 96       	adiw	r28, 0x1d	; 29
    1b18:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b1a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b1c:	6d 97       	sbiw	r28, 0x1d	; 29
    1b1e:	00 80       	ld	r0, Z
    1b20:	6d 96       	adiw	r28, 0x1d	; 29
    1b22:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b24:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b26:	6d 97       	sbiw	r28, 0x1d	; 29
    1b28:	01 96       	adiw	r24, 0x01	; 1
    1b2a:	6d 96       	adiw	r28, 0x1d	; 29
    1b2c:	9f af       	std	Y+63, r25	; 0x3f
    1b2e:	8e af       	std	Y+62, r24	; 0x3e
    1b30:	6d 97       	sbiw	r28, 0x1d	; 29
    1b32:	6b 96       	adiw	r28, 0x1b	; 27
    1b34:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b36:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b38:	6b 97       	sbiw	r28, 0x1b	; 27
    1b3a:	00 82       	st	Z, r0
    1b3c:	6b 96       	adiw	r28, 0x1b	; 27
    1b3e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b40:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b42:	6b 97       	sbiw	r28, 0x1b	; 27
    1b44:	01 96       	adiw	r24, 0x01	; 1
    1b46:	6b 96       	adiw	r28, 0x1b	; 27
    1b48:	9f af       	std	Y+63, r25	; 0x3f
    1b4a:	8e af       	std	Y+62, r24	; 0x3e
    1b4c:	6b 97       	sbiw	r28, 0x1b	; 27
    1b4e:	6e 96       	adiw	r28, 0x1e	; 30
    1b50:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b52:	6e 97       	sbiw	r28, 0x1e	; 30
    1b54:	91 50       	subi	r25, 0x01	; 1
    1b56:	6e 96       	adiw	r28, 0x1e	; 30
    1b58:	9f af       	std	Y+63, r25	; 0x3f
    1b5a:	6e 97       	sbiw	r28, 0x1e	; 30
    1b5c:	6e 96       	adiw	r28, 0x1e	; 30
    1b5e:	ef ad       	ldd	r30, Y+63	; 0x3f
    1b60:	6e 97       	sbiw	r28, 0x1e	; 30
    1b62:	ee 23       	and	r30, r30
    1b64:	c1 f6       	brne	.-80     	; 0x1b16 <main+0x36>

	u8  arrg[8]= {0b00000000,0b00000000,0b00000111,0b00000001,0b00011111,0b00000000,0b00000010,0b00000000};
    1b66:	ce 01       	movw	r24, r28
    1b68:	8f 5b       	subi	r24, 0xBF	; 191
    1b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6c:	a0 96       	adiw	r28, 0x20	; 32
    1b6e:	9f af       	std	Y+63, r25	; 0x3f
    1b70:	8e af       	std	Y+62, r24	; 0x3e
    1b72:	a0 97       	sbiw	r28, 0x20	; 32
    1b74:	e8 e1       	ldi	r30, 0x18	; 24
    1b76:	f1 e0       	ldi	r31, 0x01	; 1
    1b78:	a2 96       	adiw	r28, 0x22	; 34
    1b7a:	ff af       	std	Y+63, r31	; 0x3f
    1b7c:	ee af       	std	Y+62, r30	; 0x3e
    1b7e:	a2 97       	sbiw	r28, 0x22	; 34
    1b80:	f8 e0       	ldi	r31, 0x08	; 8
    1b82:	a3 96       	adiw	r28, 0x23	; 35
    1b84:	ff af       	std	Y+63, r31	; 0x3f
    1b86:	a3 97       	sbiw	r28, 0x23	; 35
    1b88:	a2 96       	adiw	r28, 0x22	; 34
    1b8a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b8c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b8e:	a2 97       	sbiw	r28, 0x22	; 34
    1b90:	00 80       	ld	r0, Z
    1b92:	a2 96       	adiw	r28, 0x22	; 34
    1b94:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b96:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b98:	a2 97       	sbiw	r28, 0x22	; 34
    1b9a:	01 96       	adiw	r24, 0x01	; 1
    1b9c:	a2 96       	adiw	r28, 0x22	; 34
    1b9e:	9f af       	std	Y+63, r25	; 0x3f
    1ba0:	8e af       	std	Y+62, r24	; 0x3e
    1ba2:	a2 97       	sbiw	r28, 0x22	; 34
    1ba4:	a0 96       	adiw	r28, 0x20	; 32
    1ba6:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ba8:	ff ad       	ldd	r31, Y+63	; 0x3f
    1baa:	a0 97       	sbiw	r28, 0x20	; 32
    1bac:	00 82       	st	Z, r0
    1bae:	a0 96       	adiw	r28, 0x20	; 32
    1bb0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bb2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bb4:	a0 97       	sbiw	r28, 0x20	; 32
    1bb6:	01 96       	adiw	r24, 0x01	; 1
    1bb8:	a0 96       	adiw	r28, 0x20	; 32
    1bba:	9f af       	std	Y+63, r25	; 0x3f
    1bbc:	8e af       	std	Y+62, r24	; 0x3e
    1bbe:	a0 97       	sbiw	r28, 0x20	; 32
    1bc0:	a3 96       	adiw	r28, 0x23	; 35
    1bc2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bc4:	a3 97       	sbiw	r28, 0x23	; 35
    1bc6:	91 50       	subi	r25, 0x01	; 1
    1bc8:	a3 96       	adiw	r28, 0x23	; 35
    1bca:	9f af       	std	Y+63, r25	; 0x3f
    1bcc:	a3 97       	sbiw	r28, 0x23	; 35
    1bce:	a3 96       	adiw	r28, 0x23	; 35
    1bd0:	ef ad       	ldd	r30, Y+63	; 0x3f
    1bd2:	a3 97       	sbiw	r28, 0x23	; 35
    1bd4:	ee 23       	and	r30, r30
    1bd6:	c1 f6       	brne	.-80     	; 0x1b88 <main+0xa8>

	u8  arry[8]= {0b00000000,0b00000000,0b00000000,0b00000100,0b00011111,0b00000000,0b00001100,0b00000000};
    1bd8:	ce 01       	movw	r24, r28
    1bda:	87 5b       	subi	r24, 0xB7	; 183
    1bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bde:	a5 96       	adiw	r28, 0x25	; 37
    1be0:	9f af       	std	Y+63, r25	; 0x3f
    1be2:	8e af       	std	Y+62, r24	; 0x3e
    1be4:	a5 97       	sbiw	r28, 0x25	; 37
    1be6:	80 e1       	ldi	r24, 0x10	; 16
    1be8:	91 e0       	ldi	r25, 0x01	; 1
    1bea:	a7 96       	adiw	r28, 0x27	; 39
    1bec:	9f af       	std	Y+63, r25	; 0x3f
    1bee:	8e af       	std	Y+62, r24	; 0x3e
    1bf0:	a7 97       	sbiw	r28, 0x27	; 39
    1bf2:	98 e0       	ldi	r25, 0x08	; 8
    1bf4:	a8 96       	adiw	r28, 0x28	; 40
    1bf6:	9f af       	std	Y+63, r25	; 0x3f
    1bf8:	a8 97       	sbiw	r28, 0x28	; 40
    1bfa:	a7 96       	adiw	r28, 0x27	; 39
    1bfc:	ee ad       	ldd	r30, Y+62	; 0x3e
    1bfe:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c00:	a7 97       	sbiw	r28, 0x27	; 39
    1c02:	00 80       	ld	r0, Z
    1c04:	a7 96       	adiw	r28, 0x27	; 39
    1c06:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c08:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c0a:	a7 97       	sbiw	r28, 0x27	; 39
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	a7 96       	adiw	r28, 0x27	; 39
    1c10:	9f af       	std	Y+63, r25	; 0x3f
    1c12:	8e af       	std	Y+62, r24	; 0x3e
    1c14:	a7 97       	sbiw	r28, 0x27	; 39
    1c16:	a5 96       	adiw	r28, 0x25	; 37
    1c18:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c1a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c1c:	a5 97       	sbiw	r28, 0x25	; 37
    1c1e:	00 82       	st	Z, r0
    1c20:	a5 96       	adiw	r28, 0x25	; 37
    1c22:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c24:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c26:	a5 97       	sbiw	r28, 0x25	; 37
    1c28:	01 96       	adiw	r24, 0x01	; 1
    1c2a:	a5 96       	adiw	r28, 0x25	; 37
    1c2c:	9f af       	std	Y+63, r25	; 0x3f
    1c2e:	8e af       	std	Y+62, r24	; 0x3e
    1c30:	a5 97       	sbiw	r28, 0x25	; 37
    1c32:	a8 96       	adiw	r28, 0x28	; 40
    1c34:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c36:	a8 97       	sbiw	r28, 0x28	; 40
    1c38:	91 50       	subi	r25, 0x01	; 1
    1c3a:	a8 96       	adiw	r28, 0x28	; 40
    1c3c:	9f af       	std	Y+63, r25	; 0x3f
    1c3e:	a8 97       	sbiw	r28, 0x28	; 40
    1c40:	a8 96       	adiw	r28, 0x28	; 40
    1c42:	ef ad       	ldd	r30, Y+63	; 0x3f
    1c44:	a8 97       	sbiw	r28, 0x28	; 40
    1c46:	ee 23       	and	r30, r30
    1c48:	c1 f6       	brne	.-80     	; 0x1bfa <main+0x11a>

	u8 arrh[8]=  {0b00000000,0b00011100,0b00010100,0b00011100,0b00000111,0b00000000,0b00000000,0b00000000};
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	8f 5a       	subi	r24, 0xAF	; 175
    1c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c50:	aa 96       	adiw	r28, 0x2a	; 42
    1c52:	9f af       	std	Y+63, r25	; 0x3f
    1c54:	8e af       	std	Y+62, r24	; 0x3e
    1c56:	aa 97       	sbiw	r28, 0x2a	; 42
    1c58:	88 e0       	ldi	r24, 0x08	; 8
    1c5a:	91 e0       	ldi	r25, 0x01	; 1
    1c5c:	ac 96       	adiw	r28, 0x2c	; 44
    1c5e:	9f af       	std	Y+63, r25	; 0x3f
    1c60:	8e af       	std	Y+62, r24	; 0x3e
    1c62:	ac 97       	sbiw	r28, 0x2c	; 44
    1c64:	98 e0       	ldi	r25, 0x08	; 8
    1c66:	ad 96       	adiw	r28, 0x2d	; 45
    1c68:	9f af       	std	Y+63, r25	; 0x3f
    1c6a:	ad 97       	sbiw	r28, 0x2d	; 45
    1c6c:	ac 96       	adiw	r28, 0x2c	; 44
    1c6e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c70:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c72:	ac 97       	sbiw	r28, 0x2c	; 44
    1c74:	00 80       	ld	r0, Z
    1c76:	ac 96       	adiw	r28, 0x2c	; 44
    1c78:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c7a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c7c:	ac 97       	sbiw	r28, 0x2c	; 44
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	ac 96       	adiw	r28, 0x2c	; 44
    1c82:	9f af       	std	Y+63, r25	; 0x3f
    1c84:	8e af       	std	Y+62, r24	; 0x3e
    1c86:	ac 97       	sbiw	r28, 0x2c	; 44
    1c88:	aa 96       	adiw	r28, 0x2a	; 42
    1c8a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c8c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c8e:	aa 97       	sbiw	r28, 0x2a	; 42
    1c90:	00 82       	st	Z, r0
    1c92:	aa 96       	adiw	r28, 0x2a	; 42
    1c94:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c96:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c98:	aa 97       	sbiw	r28, 0x2a	; 42
    1c9a:	01 96       	adiw	r24, 0x01	; 1
    1c9c:	aa 96       	adiw	r28, 0x2a	; 42
    1c9e:	9f af       	std	Y+63, r25	; 0x3f
    1ca0:	8e af       	std	Y+62, r24	; 0x3e
    1ca2:	aa 97       	sbiw	r28, 0x2a	; 42
    1ca4:	ad 96       	adiw	r28, 0x2d	; 45
    1ca6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ca8:	ad 97       	sbiw	r28, 0x2d	; 45
    1caa:	91 50       	subi	r25, 0x01	; 1
    1cac:	ad 96       	adiw	r28, 0x2d	; 45
    1cae:	9f af       	std	Y+63, r25	; 0x3f
    1cb0:	ad 97       	sbiw	r28, 0x2d	; 45
    1cb2:	ad 96       	adiw	r28, 0x2d	; 45
    1cb4:	ef ad       	ldd	r30, Y+63	; 0x3f
    1cb6:	ad 97       	sbiw	r28, 0x2d	; 45
    1cb8:	ee 23       	and	r30, r30
    1cba:	c1 f6       	brne	.-80     	; 0x1c6c <main+0x18c>
//	DIO_u8SetPortDirection(CLCD_DATA_PORT,DIO_u8PORT_OUTPUT);
//	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_OUTPUT);
//	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_OUTPUT);
//	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_OUTPUT);

	PORT_VoidInit();
    1cbc:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <PORT_VoidInit>


	CLCD_voidInit();
    1cc0:	0e 94 b1 09 	call	0x1362	; 0x1362 <CLCD_voidInit>


	while(1){
		CLCD_VoidWriteSpecialCha(arrw, 0,0,3);
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	c9 96       	adiw	r24, 0x39	; 57
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	23 e0       	ldi	r18, 0x03	; 3
    1cce:	0e 94 8c 0a 	call	0x1518	; 0x1518 <CLCD_VoidWriteSpecialCha>
		CLCD_VoidWriteSpecialCha(arrg, 1,0,2);
    1cd2:	ce 01       	movw	r24, r28
    1cd4:	8f 5b       	subi	r24, 0xBF	; 191
    1cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd8:	61 e0       	ldi	r22, 0x01	; 1
    1cda:	40 e0       	ldi	r20, 0x00	; 0
    1cdc:	22 e0       	ldi	r18, 0x02	; 2
    1cde:	0e 94 8c 0a 	call	0x1518	; 0x1518 <CLCD_VoidWriteSpecialCha>
		CLCD_VoidWriteSpecialCha(arry, 2,0,1);
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	87 5b       	subi	r24, 0xB7	; 183
    1ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce8:	62 e0       	ldi	r22, 0x02	; 2
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	21 e0       	ldi	r18, 0x01	; 1
    1cee:	0e 94 8c 0a 	call	0x1518	; 0x1518 <CLCD_VoidWriteSpecialCha>
		CLCD_VoidWriteSpecialCha(arrh, 3,0,0);
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	8f 5a       	subi	r24, 0xAF	; 175
    1cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf8:	63 e0       	ldi	r22, 0x03	; 3
    1cfa:	40 e0       	ldi	r20, 0x00	; 0
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	0e 94 8c 0a 	call	0x1518	; 0x1518 <CLCD_VoidWriteSpecialCha>
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	aa ef       	ldi	r26, 0xFA	; 250
    1d08:	b3 e4       	ldi	r27, 0x43	; 67
    1d0a:	8d ab       	std	Y+53, r24	; 0x35
    1d0c:	9e ab       	std	Y+54, r25	; 0x36
    1d0e:	af ab       	std	Y+55, r26	; 0x37
    1d10:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d12:	6d a9       	ldd	r22, Y+53	; 0x35
    1d14:	7e a9       	ldd	r23, Y+54	; 0x36
    1d16:	8f a9       	ldd	r24, Y+55	; 0x37
    1d18:	98 ad       	ldd	r25, Y+56	; 0x38
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	4a ef       	ldi	r20, 0xFA	; 250
    1d20:	54 e4       	ldi	r21, 0x44	; 68
    1d22:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	89 ab       	std	Y+49, r24	; 0x31
    1d2c:	9a ab       	std	Y+50, r25	; 0x32
    1d2e:	ab ab       	std	Y+51, r26	; 0x33
    1d30:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d32:	69 a9       	ldd	r22, Y+49	; 0x31
    1d34:	7a a9       	ldd	r23, Y+50	; 0x32
    1d36:	8b a9       	ldd	r24, Y+51	; 0x33
    1d38:	9c a9       	ldd	r25, Y+52	; 0x34
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e8       	ldi	r20, 0x80	; 128
    1d40:	5f e3       	ldi	r21, 0x3F	; 63
    1d42:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1d46:	88 23       	and	r24, r24
    1d48:	2c f4       	brge	.+10     	; 0x1d54 <main+0x274>
		__ticks = 1;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	98 ab       	std	Y+48, r25	; 0x30
    1d50:	8f a7       	std	Y+47, r24	; 0x2f
    1d52:	3f c0       	rjmp	.+126    	; 0x1dd2 <main+0x2f2>
	else if (__tmp > 65535)
    1d54:	69 a9       	ldd	r22, Y+49	; 0x31
    1d56:	7a a9       	ldd	r23, Y+50	; 0x32
    1d58:	8b a9       	ldd	r24, Y+51	; 0x33
    1d5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	3f ef       	ldi	r19, 0xFF	; 255
    1d60:	4f e7       	ldi	r20, 0x7F	; 127
    1d62:	57 e4       	ldi	r21, 0x47	; 71
    1d64:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1d68:	18 16       	cp	r1, r24
    1d6a:	4c f5       	brge	.+82     	; 0x1dbe <main+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6c:	6d a9       	ldd	r22, Y+53	; 0x35
    1d6e:	7e a9       	ldd	r23, Y+54	; 0x36
    1d70:	8f a9       	ldd	r24, Y+55	; 0x37
    1d72:	98 ad       	ldd	r25, Y+56	; 0x38
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e2       	ldi	r20, 0x20	; 32
    1d7a:	51 e4       	ldi	r21, 0x41	; 65
    1d7c:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	98 ab       	std	Y+48, r25	; 0x30
    1d92:	8f a7       	std	Y+47, r24	; 0x2f
    1d94:	0f c0       	rjmp	.+30     	; 0x1db4 <main+0x2d4>
    1d96:	88 ec       	ldi	r24, 0xC8	; 200
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	9e a7       	std	Y+46, r25	; 0x2e
    1d9c:	8d a7       	std	Y+45, r24	; 0x2d
    1d9e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1da0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <main+0x2c2>
    1da6:	9e a7       	std	Y+46, r25	; 0x2e
    1da8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1daa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dac:	98 a9       	ldd	r25, Y+48	; 0x30
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	98 ab       	std	Y+48, r25	; 0x30
    1db2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1db6:	98 a9       	ldd	r25, Y+48	; 0x30
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	69 f7       	brne	.-38     	; 0x1d96 <main+0x2b6>
    1dbc:	14 c0       	rjmp	.+40     	; 0x1de6 <main+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dbe:	69 a9       	ldd	r22, Y+49	; 0x31
    1dc0:	7a a9       	ldd	r23, Y+50	; 0x32
    1dc2:	8b a9       	ldd	r24, Y+51	; 0x33
    1dc4:	9c a9       	ldd	r25, Y+52	; 0x34
    1dc6:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	98 ab       	std	Y+48, r25	; 0x30
    1dd0:	8f a7       	std	Y+47, r24	; 0x2f
    1dd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dd4:	98 a9       	ldd	r25, Y+48	; 0x30
    1dd6:	9c a7       	std	Y+44, r25	; 0x2c
    1dd8:	8b a7       	std	Y+43, r24	; 0x2b
    1dda:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ddc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <main+0x2fe>
    1de2:	9c a7       	std	Y+44, r25	; 0x2c
    1de4:	8b a7       	std	Y+43, r24	; 0x2b

		_delay_ms(500);
		CLCD_voidSendCommand(1);
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <CLCD_voidSendCommand>

		CLCD_VoidWriteSpecialCha(arrw, 0,1,7);
    1dec:	ce 01       	movw	r24, r28
    1dee:	c9 96       	adiw	r24, 0x39	; 57
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	41 e0       	ldi	r20, 0x01	; 1
    1df4:	27 e0       	ldi	r18, 0x07	; 7
    1df6:	0e 94 8c 0a 	call	0x1518	; 0x1518 <CLCD_VoidWriteSpecialCha>
		CLCD_VoidWriteSpecialCha(arrg, 1,1,6);
    1dfa:	ce 01       	movw	r24, r28
    1dfc:	8f 5b       	subi	r24, 0xBF	; 191
    1dfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1e00:	61 e0       	ldi	r22, 0x01	; 1
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	26 e0       	ldi	r18, 0x06	; 6
    1e06:	0e 94 8c 0a 	call	0x1518	; 0x1518 <CLCD_VoidWriteSpecialCha>
		CLCD_VoidWriteSpecialCha(arry, 2,1,5);
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	87 5b       	subi	r24, 0xB7	; 183
    1e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e10:	62 e0       	ldi	r22, 0x02	; 2
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	25 e0       	ldi	r18, 0x05	; 5
    1e16:	0e 94 8c 0a 	call	0x1518	; 0x1518 <CLCD_VoidWriteSpecialCha>
		CLCD_VoidWriteSpecialCha(arrh, 3,1,4);
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	8f 5a       	subi	r24, 0xAF	; 175
    1e1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e20:	63 e0       	ldi	r22, 0x03	; 3
    1e22:	41 e0       	ldi	r20, 0x01	; 1
    1e24:	24 e0       	ldi	r18, 0x04	; 4
    1e26:	0e 94 8c 0a 	call	0x1518	; 0x1518 <CLCD_VoidWriteSpecialCha>
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	aa ef       	ldi	r26, 0xFA	; 250
    1e30:	b3 e4       	ldi	r27, 0x43	; 67
    1e32:	8f a3       	std	Y+39, r24	; 0x27
    1e34:	98 a7       	std	Y+40, r25	; 0x28
    1e36:	a9 a7       	std	Y+41, r26	; 0x29
    1e38:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3a:	6f a1       	ldd	r22, Y+39	; 0x27
    1e3c:	78 a5       	ldd	r23, Y+40	; 0x28
    1e3e:	89 a5       	ldd	r24, Y+41	; 0x29
    1e40:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	4a ef       	ldi	r20, 0xFA	; 250
    1e48:	54 e4       	ldi	r21, 0x44	; 68
    1e4a:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	8b a3       	std	Y+35, r24	; 0x23
    1e54:	9c a3       	std	Y+36, r25	; 0x24
    1e56:	ad a3       	std	Y+37, r26	; 0x25
    1e58:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e60:	9e a1       	ldd	r25, Y+38	; 0x26
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e8       	ldi	r20, 0x80	; 128
    1e68:	5f e3       	ldi	r21, 0x3F	; 63
    1e6a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1e6e:	88 23       	and	r24, r24
    1e70:	2c f4       	brge	.+10     	; 0x1e7c <main+0x39c>
		__ticks = 1;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	9a a3       	std	Y+34, r25	; 0x22
    1e78:	89 a3       	std	Y+33, r24	; 0x21
    1e7a:	3f c0       	rjmp	.+126    	; 0x1efa <main+0x41a>
	else if (__tmp > 65535)
    1e7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e80:	8d a1       	ldd	r24, Y+37	; 0x25
    1e82:	9e a1       	ldd	r25, Y+38	; 0x26
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	3f ef       	ldi	r19, 0xFF	; 255
    1e88:	4f e7       	ldi	r20, 0x7F	; 127
    1e8a:	57 e4       	ldi	r21, 0x47	; 71
    1e8c:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1e90:	18 16       	cp	r1, r24
    1e92:	4c f5       	brge	.+82     	; 0x1ee6 <main+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e94:	6f a1       	ldd	r22, Y+39	; 0x27
    1e96:	78 a5       	ldd	r23, Y+40	; 0x28
    1e98:	89 a5       	ldd	r24, Y+41	; 0x29
    1e9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e2       	ldi	r20, 0x20	; 32
    1ea2:	51 e4       	ldi	r21, 0x41	; 65
    1ea4:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	bc 01       	movw	r22, r24
    1eae:	cd 01       	movw	r24, r26
    1eb0:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	9a a3       	std	Y+34, r25	; 0x22
    1eba:	89 a3       	std	Y+33, r24	; 0x21
    1ebc:	0f c0       	rjmp	.+30     	; 0x1edc <main+0x3fc>
    1ebe:	88 ec       	ldi	r24, 0xC8	; 200
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	98 a3       	std	Y+32, r25	; 0x20
    1ec4:	8f 8f       	std	Y+31, r24	; 0x1f
    1ec6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ec8:	98 a1       	ldd	r25, Y+32	; 0x20
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <main+0x3ea>
    1ece:	98 a3       	std	Y+32, r25	; 0x20
    1ed0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ed4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	9a a3       	std	Y+34, r25	; 0x22
    1eda:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1edc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ede:	9a a1       	ldd	r25, Y+34	; 0x22
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	69 f7       	brne	.-38     	; 0x1ebe <main+0x3de>
    1ee4:	14 c0       	rjmp	.+40     	; 0x1f0e <main+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eea:	8d a1       	ldd	r24, Y+37	; 0x25
    1eec:	9e a1       	ldd	r25, Y+38	; 0x26
    1eee:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9a a3       	std	Y+34, r25	; 0x22
    1ef8:	89 a3       	std	Y+33, r24	; 0x21
    1efa:	89 a1       	ldd	r24, Y+33	; 0x21
    1efc:	9a a1       	ldd	r25, Y+34	; 0x22
    1efe:	9e 8f       	std	Y+30, r25	; 0x1e
    1f00:	8d 8f       	std	Y+29, r24	; 0x1d
    1f02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <main+0x426>
    1f0a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f0c:	8d 8f       	std	Y+29, r24	; 0x1d



		_delay_ms(500);
		CLCD_voidSendCommand(1);
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	0e 94 a5 05 	call	0xb4a	; 0xb4a <CLCD_voidSendCommand>


		CLCD_VoidWriteSpecialCha(arrw, 0,0,11);
    1f14:	ce 01       	movw	r24, r28
    1f16:	c9 96       	adiw	r24, 0x39	; 57
    1f18:	60 e0       	ldi	r22, 0x00	; 0
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	2b e0       	ldi	r18, 0x0B	; 11
    1f1e:	0e 94 8c 0a 	call	0x1518	; 0x1518 <CLCD_VoidWriteSpecialCha>
		CLCD_VoidWriteSpecialCha(arrg, 1,0,10);
    1f22:	ce 01       	movw	r24, r28
    1f24:	8f 5b       	subi	r24, 0xBF	; 191
    1f26:	9f 4f       	sbci	r25, 0xFF	; 255
    1f28:	61 e0       	ldi	r22, 0x01	; 1
    1f2a:	40 e0       	ldi	r20, 0x00	; 0
    1f2c:	2a e0       	ldi	r18, 0x0A	; 10
    1f2e:	0e 94 8c 0a 	call	0x1518	; 0x1518 <CLCD_VoidWriteSpecialCha>
		CLCD_VoidWriteSpecialCha(arry, 2,0,9);
    1f32:	ce 01       	movw	r24, r28
    1f34:	87 5b       	subi	r24, 0xB7	; 183
    1f36:	9f 4f       	sbci	r25, 0xFF	; 255
    1f38:	62 e0       	ldi	r22, 0x02	; 2
    1f3a:	40 e0       	ldi	r20, 0x00	; 0
    1f3c:	29 e0       	ldi	r18, 0x09	; 9
    1f3e:	0e 94 8c 0a 	call	0x1518	; 0x1518 <CLCD_VoidWriteSpecialCha>
		CLCD_VoidWriteSpecialCha(arrh, 3,0,8);
    1f42:	ce 01       	movw	r24, r28
    1f44:	8f 5a       	subi	r24, 0xAF	; 175
    1f46:	9f 4f       	sbci	r25, 0xFF	; 255
    1f48:	63 e0       	ldi	r22, 0x03	; 3
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	28 e0       	ldi	r18, 0x08	; 8
    1f4e:	0e 94 8c 0a 	call	0x1518	; 0x1518 <CLCD_VoidWriteSpecialCha>
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	aa ef       	ldi	r26, 0xFA	; 250
    1f58:	b3 e4       	ldi	r27, 0x43	; 67
    1f5a:	89 8f       	std	Y+25, r24	; 0x19
    1f5c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f5e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f62:	69 8d       	ldd	r22, Y+25	; 0x19
    1f64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	4a ef       	ldi	r20, 0xFA	; 250
    1f70:	54 e4       	ldi	r21, 0x44	; 68
    1f72:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	8d 8b       	std	Y+21, r24	; 0x15
    1f7c:	9e 8b       	std	Y+22, r25	; 0x16
    1f7e:	af 8b       	std	Y+23, r26	; 0x17
    1f80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f82:	6d 89       	ldd	r22, Y+21	; 0x15
    1f84:	7e 89       	ldd	r23, Y+22	; 0x16
    1f86:	8f 89       	ldd	r24, Y+23	; 0x17
    1f88:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e8       	ldi	r20, 0x80	; 128
    1f90:	5f e3       	ldi	r21, 0x3F	; 63
    1f92:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1f96:	88 23       	and	r24, r24
    1f98:	2c f4       	brge	.+10     	; 0x1fa4 <main+0x4c4>
		__ticks = 1;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	9c 8b       	std	Y+20, r25	; 0x14
    1fa0:	8b 8b       	std	Y+19, r24	; 0x13
    1fa2:	3f c0       	rjmp	.+126    	; 0x2022 <main+0x542>
	else if (__tmp > 65535)
    1fa4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa8:	8f 89       	ldd	r24, Y+23	; 0x17
    1faa:	98 8d       	ldd	r25, Y+24	; 0x18
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	3f ef       	ldi	r19, 0xFF	; 255
    1fb0:	4f e7       	ldi	r20, 0x7F	; 127
    1fb2:	57 e4       	ldi	r21, 0x47	; 71
    1fb4:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1fb8:	18 16       	cp	r1, r24
    1fba:	4c f5       	brge	.+82     	; 0x200e <main+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbc:	69 8d       	ldd	r22, Y+25	; 0x19
    1fbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e2       	ldi	r20, 0x20	; 32
    1fca:	51 e4       	ldi	r21, 0x41	; 65
    1fcc:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	bc 01       	movw	r22, r24
    1fd6:	cd 01       	movw	r24, r26
    1fd8:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	9c 8b       	std	Y+20, r25	; 0x14
    1fe2:	8b 8b       	std	Y+19, r24	; 0x13
    1fe4:	0f c0       	rjmp	.+30     	; 0x2004 <main+0x524>
    1fe6:	88 ec       	ldi	r24, 0xC8	; 200
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	9a 8b       	std	Y+18, r25	; 0x12
    1fec:	89 8b       	std	Y+17, r24	; 0x11
    1fee:	89 89       	ldd	r24, Y+17	; 0x11
    1ff0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <main+0x512>
    1ff6:	9a 8b       	std	Y+18, r25	; 0x12
    1ff8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffa:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	9c 8b       	std	Y+20, r25	; 0x14
    2002:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2004:	8b 89       	ldd	r24, Y+19	; 0x13
    2006:	9c 89       	ldd	r25, Y+20	; 0x14
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	69 f7       	brne	.-38     	; 0x1fe6 <main+0x506>
    200c:	14 c0       	rjmp	.+40     	; 0x2036 <main+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200e:	6d 89       	ldd	r22, Y+21	; 0x15
    2010:	7e 89       	ldd	r23, Y+22	; 0x16
    2012:	8f 89       	ldd	r24, Y+23	; 0x17
    2014:	98 8d       	ldd	r25, Y+24	; 0x18
    2016:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	9c 8b       	std	Y+20, r25	; 0x14
    2020:	8b 8b       	std	Y+19, r24	; 0x13
    2022:	8b 89       	ldd	r24, Y+19	; 0x13
    2024:	9c 89       	ldd	r25, Y+20	; 0x14
    2026:	98 8b       	std	Y+16, r25	; 0x10
    2028:	8f 87       	std	Y+15, r24	; 0x0f
    202a:	8f 85       	ldd	r24, Y+15	; 0x0f
    202c:	98 89       	ldd	r25, Y+16	; 0x10
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <main+0x54e>
    2032:	98 8b       	std	Y+16, r25	; 0x10
    2034:	8f 87       	std	Y+15, r24	; 0x0f



		_delay_ms(500);

		CLCD_voidSendCommand(1);
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	0e 94 a5 05 	call	0xb4a	; 0xb4a <CLCD_voidSendCommand>

		CLCD_VoidWriteSpecialCha(arrw, 0,1,15);
    203c:	ce 01       	movw	r24, r28
    203e:	c9 96       	adiw	r24, 0x39	; 57
    2040:	60 e0       	ldi	r22, 0x00	; 0
    2042:	41 e0       	ldi	r20, 0x01	; 1
    2044:	2f e0       	ldi	r18, 0x0F	; 15
    2046:	0e 94 8c 0a 	call	0x1518	; 0x1518 <CLCD_VoidWriteSpecialCha>
		CLCD_VoidWriteSpecialCha(arrg, 1,1,14);
    204a:	ce 01       	movw	r24, r28
    204c:	8f 5b       	subi	r24, 0xBF	; 191
    204e:	9f 4f       	sbci	r25, 0xFF	; 255
    2050:	61 e0       	ldi	r22, 0x01	; 1
    2052:	41 e0       	ldi	r20, 0x01	; 1
    2054:	2e e0       	ldi	r18, 0x0E	; 14
    2056:	0e 94 8c 0a 	call	0x1518	; 0x1518 <CLCD_VoidWriteSpecialCha>
		CLCD_VoidWriteSpecialCha(arry, 2,1,13);
    205a:	ce 01       	movw	r24, r28
    205c:	87 5b       	subi	r24, 0xB7	; 183
    205e:	9f 4f       	sbci	r25, 0xFF	; 255
    2060:	62 e0       	ldi	r22, 0x02	; 2
    2062:	41 e0       	ldi	r20, 0x01	; 1
    2064:	2d e0       	ldi	r18, 0x0D	; 13
    2066:	0e 94 8c 0a 	call	0x1518	; 0x1518 <CLCD_VoidWriteSpecialCha>
		CLCD_VoidWriteSpecialCha(arrh, 3,1,12);
    206a:	ce 01       	movw	r24, r28
    206c:	8f 5a       	subi	r24, 0xAF	; 175
    206e:	9f 4f       	sbci	r25, 0xFF	; 255
    2070:	63 e0       	ldi	r22, 0x03	; 3
    2072:	41 e0       	ldi	r20, 0x01	; 1
    2074:	2c e0       	ldi	r18, 0x0C	; 12
    2076:	0e 94 8c 0a 	call	0x1518	; 0x1518 <CLCD_VoidWriteSpecialCha>
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	aa ef       	ldi	r26, 0xFA	; 250
    2080:	b3 e4       	ldi	r27, 0x43	; 67
    2082:	8b 87       	std	Y+11, r24	; 0x0b
    2084:	9c 87       	std	Y+12, r25	; 0x0c
    2086:	ad 87       	std	Y+13, r26	; 0x0d
    2088:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208a:	6b 85       	ldd	r22, Y+11	; 0x0b
    208c:	7c 85       	ldd	r23, Y+12	; 0x0c
    208e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2090:	9e 85       	ldd	r25, Y+14	; 0x0e
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	4a ef       	ldi	r20, 0xFA	; 250
    2098:	54 e4       	ldi	r21, 0x44	; 68
    209a:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	8f 83       	std	Y+7, r24	; 0x07
    20a4:	98 87       	std	Y+8, r25	; 0x08
    20a6:	a9 87       	std	Y+9, r26	; 0x09
    20a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20aa:	6f 81       	ldd	r22, Y+7	; 0x07
    20ac:	78 85       	ldd	r23, Y+8	; 0x08
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e8       	ldi	r20, 0x80	; 128
    20b8:	5f e3       	ldi	r21, 0x3F	; 63
    20ba:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    20be:	88 23       	and	r24, r24
    20c0:	2c f4       	brge	.+10     	; 0x20cc <main+0x5ec>
		__ticks = 1;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9e 83       	std	Y+6, r25	; 0x06
    20c8:	8d 83       	std	Y+5, r24	; 0x05
    20ca:	3f c0       	rjmp	.+126    	; 0x214a <main+0x66a>
	else if (__tmp > 65535)
    20cc:	6f 81       	ldd	r22, Y+7	; 0x07
    20ce:	78 85       	ldd	r23, Y+8	; 0x08
    20d0:	89 85       	ldd	r24, Y+9	; 0x09
    20d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	3f ef       	ldi	r19, 0xFF	; 255
    20d8:	4f e7       	ldi	r20, 0x7F	; 127
    20da:	57 e4       	ldi	r21, 0x47	; 71
    20dc:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    20e0:	18 16       	cp	r1, r24
    20e2:	4c f5       	brge	.+82     	; 0x2136 <main+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e2       	ldi	r20, 0x20	; 32
    20f2:	51 e4       	ldi	r21, 0x41	; 65
    20f4:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	bc 01       	movw	r22, r24
    20fe:	cd 01       	movw	r24, r26
    2100:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	9e 83       	std	Y+6, r25	; 0x06
    210a:	8d 83       	std	Y+5, r24	; 0x05
    210c:	0f c0       	rjmp	.+30     	; 0x212c <main+0x64c>
    210e:	88 ec       	ldi	r24, 0xC8	; 200
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	9c 83       	std	Y+4, r25	; 0x04
    2114:	8b 83       	std	Y+3, r24	; 0x03
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	9c 81       	ldd	r25, Y+4	; 0x04
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	f1 f7       	brne	.-4      	; 0x211a <main+0x63a>
    211e:	9c 83       	std	Y+4, r25	; 0x04
    2120:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	9e 81       	ldd	r25, Y+6	; 0x06
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	9e 83       	std	Y+6, r25	; 0x06
    212a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212c:	8d 81       	ldd	r24, Y+5	; 0x05
    212e:	9e 81       	ldd	r25, Y+6	; 0x06
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	69 f7       	brne	.-38     	; 0x210e <main+0x62e>
    2134:	14 c0       	rjmp	.+40     	; 0x215e <main+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2136:	6f 81       	ldd	r22, Y+7	; 0x07
    2138:	78 85       	ldd	r23, Y+8	; 0x08
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	9a 85       	ldd	r25, Y+10	; 0x0a
    213e:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	9e 83       	std	Y+6, r25	; 0x06
    2148:	8d 83       	std	Y+5, r24	; 0x05
    214a:	8d 81       	ldd	r24, Y+5	; 0x05
    214c:	9e 81       	ldd	r25, Y+6	; 0x06
    214e:	9a 83       	std	Y+2, r25	; 0x02
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	9a 81       	ldd	r25, Y+2	; 0x02
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <main+0x676>
    215a:	9a 83       	std	Y+2, r25	; 0x02
    215c:	89 83       	std	Y+1, r24	; 0x01



		_delay_ms(500);

		CLCD_voidSendCommand(1);
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	0e 94 a5 05 	call	0xb4a	; 0xb4a <CLCD_voidSendCommand>
    2164:	af cd       	rjmp	.-1186   	; 0x1cc4 <main+0x1e4>

00002166 <__prologue_saves__>:
    2166:	2f 92       	push	r2
    2168:	3f 92       	push	r3
    216a:	4f 92       	push	r4
    216c:	5f 92       	push	r5
    216e:	6f 92       	push	r6
    2170:	7f 92       	push	r7
    2172:	8f 92       	push	r8
    2174:	9f 92       	push	r9
    2176:	af 92       	push	r10
    2178:	bf 92       	push	r11
    217a:	cf 92       	push	r12
    217c:	df 92       	push	r13
    217e:	ef 92       	push	r14
    2180:	ff 92       	push	r15
    2182:	0f 93       	push	r16
    2184:	1f 93       	push	r17
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	ca 1b       	sub	r28, r26
    2190:	db 0b       	sbc	r29, r27
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	09 94       	ijmp

0000219e <__epilogue_restores__>:
    219e:	2a 88       	ldd	r2, Y+18	; 0x12
    21a0:	39 88       	ldd	r3, Y+17	; 0x11
    21a2:	48 88       	ldd	r4, Y+16	; 0x10
    21a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    21a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    21a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    21aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    21ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    21ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    21b0:	b9 84       	ldd	r11, Y+9	; 0x09
    21b2:	c8 84       	ldd	r12, Y+8	; 0x08
    21b4:	df 80       	ldd	r13, Y+7	; 0x07
    21b6:	ee 80       	ldd	r14, Y+6	; 0x06
    21b8:	fd 80       	ldd	r15, Y+5	; 0x05
    21ba:	0c 81       	ldd	r16, Y+4	; 0x04
    21bc:	1b 81       	ldd	r17, Y+3	; 0x03
    21be:	aa 81       	ldd	r26, Y+2	; 0x02
    21c0:	b9 81       	ldd	r27, Y+1	; 0x01
    21c2:	ce 0f       	add	r28, r30
    21c4:	d1 1d       	adc	r29, r1
    21c6:	0f b6       	in	r0, 0x3f	; 63
    21c8:	f8 94       	cli
    21ca:	de bf       	out	0x3e, r29	; 62
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	cd bf       	out	0x3d, r28	; 61
    21d0:	ed 01       	movw	r28, r26
    21d2:	08 95       	ret

000021d4 <_exit>:
    21d4:	f8 94       	cli

000021d6 <__stop_program>:
    21d6:	ff cf       	rjmp	.-2      	; 0x21d6 <__stop_program>
